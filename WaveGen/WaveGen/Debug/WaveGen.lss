
WaveGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000526  00800100  00001ffa  0000208e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000275  00800626  00800626  000025b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab4  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097c  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e1  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00005d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010287  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4e  00000000  00000000  00016237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00017185  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000a33  00000000  00000000  00017385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c3       	rjmp	.+1764   	; 0x712 <__vector_11>
      2e:	00 00       	nop
      30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
      32:	00 00       	nop
      34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__vector_14>
      3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__vector_18>
      4a:	00 00       	nop
      4c:	48 c0       	rjmp	.+144    	; 0xde <__vector_19>
      4e:	00 00       	nop
      50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
      62:	00 00       	nop
      64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d8 e0       	ldi	r29, 0x08	; 8
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	16 e0       	ldi	r17, 0x06	; 6
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea ef       	ldi	r30, 0xFA	; 250
      b8:	ff e1       	ldi	r31, 0x1F	; 31
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a6 32       	cpi	r26, 0x26	; 38
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	28 e0       	ldi	r18, 0x08	; 8
      c8:	a6 e2       	ldi	r26, 0x26	; 38
      ca:	b6 e0       	ldi	r27, 0x06	; 6
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ab 39       	cpi	r26, 0x9B	; 155
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	62 d6       	rcall	.+3268   	; 0xd9c <main>
      d8:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <_exit>

000000dc <__bad_interrupt>:
      dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <__vector_19>:
 * \brief Stops I2C
 * \param Null
 * \retval Null
 */
void StopSend(void) {
    TWCR = (1  <<  TWINT) | (1  <<  TWEN) | (1  <<  TWSTO);
      de:	1f 92       	push	r1
      e0:	0f 92       	push	r0
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	0f 92       	push	r0
      e6:	11 24       	eor	r1, r1
      e8:	2f 93       	push	r18
      ea:	3f 93       	push	r19
      ec:	4f 93       	push	r20
      ee:	5f 93       	push	r21
      f0:	8f 93       	push	r24
      f2:	9f 93       	push	r25
      f4:	af 93       	push	r26
      f6:	bf 93       	push	r27
      f8:	ef 93       	push	r30
      fa:	ff 93       	push	r31
      fc:	e4 e9       	ldi	r30, 0x94	; 148
      fe:	f8 e0       	ldi	r31, 0x08	; 8
     100:	91 81       	ldd	r25, Z+1	; 0x01
     102:	80 81       	ld	r24, Z
     104:	98 17       	cp	r25, r24
     106:	f9 f0       	breq	.+62     	; 0x146 <__vector_19+0x68>
     108:	91 81       	ldd	r25, Z+1	; 0x01
     10a:	80 81       	ld	r24, Z
     10c:	98 13       	cpse	r25, r24
     10e:	01 c0       	rjmp	.+2      	; 0x112 <__vector_19+0x34>
     110:	ff cf       	rjmp	.-2      	; 0x110 <__vector_19+0x32>
     112:	e4 e9       	ldi	r30, 0x94	; 148
     114:	f8 e0       	ldi	r31, 0x08	; 8
     116:	81 81       	ldd	r24, Z+1	; 0x01
     118:	a3 81       	ldd	r26, Z+3	; 0x03
     11a:	b4 81       	ldd	r27, Z+4	; 0x04
     11c:	a8 0f       	add	r26, r24
     11e:	b1 1d       	adc	r27, r1
     120:	9c 91       	ld	r25, X
     122:	81 81       	ldd	r24, Z+1	; 0x01
     124:	48 2f       	mov	r20, r24
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	22 81       	ldd	r18, Z+2	; 0x02
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	21 50       	subi	r18, 0x01	; 1
     12e:	31 09       	sbc	r19, r1
     130:	42 17       	cp	r20, r18
     132:	53 07       	cpc	r21, r19
     134:	11 f0       	breq	.+4      	; 0x13a <__vector_19+0x5c>
     136:	8f 5f       	subi	r24, 0xFF	; 255
     138:	01 c0       	rjmp	.+2      	; 0x13c <__vector_19+0x5e>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <ring_buffer_out+0x1>
     140:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     144:	05 c0       	rjmp	.+10     	; 0x150 <__vector_19+0x72>
     146:	e1 ec       	ldi	r30, 0xC1	; 193
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8f 7d       	andi	r24, 0xDF	; 223
     14e:	80 83       	st	Z, r24
     150:	ff 91       	pop	r31
     152:	ef 91       	pop	r30
     154:	bf 91       	pop	r27
     156:	af 91       	pop	r26
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	5f 91       	pop	r21
     15e:	4f 91       	pop	r20
     160:	3f 91       	pop	r19
     162:	2f 91       	pop	r18
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <__vector_18>:
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	2f 93       	push	r18
     17a:	3f 93       	push	r19
     17c:	4f 93       	push	r20
     17e:	5f 93       	push	r21
     180:	6f 93       	push	r22
     182:	7f 93       	push	r23
     184:	8f 93       	push	r24
     186:	9f 93       	push	r25
     188:	af 93       	push	r26
     18a:	bf 93       	push	r27
     18c:	ef 93       	push	r30
     18e:	ff 93       	push	r31
     190:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     194:	ec e8       	ldi	r30, 0x8C	; 140
     196:	f8 e0       	ldi	r31, 0x08	; 8
     198:	41 81       	ldd	r20, Z+1	; 0x01
     19a:	80 81       	ld	r24, Z
     19c:	68 2f       	mov	r22, r24
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	22 81       	ldd	r18, Z+2	; 0x02
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	31 09       	sbc	r19, r1
     1a8:	62 17       	cp	r22, r18
     1aa:	73 07       	cpc	r23, r19
     1ac:	11 f0       	breq	.+4      	; 0x1b2 <__vector_18+0x44>
     1ae:	8f 5f       	subi	r24, 0xFF	; 255
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <__vector_18+0x46>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	48 13       	cpse	r20, r24
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <__vector_18+0x4c>
     1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__vector_18+0x4a>
     1ba:	ec e8       	ldi	r30, 0x8C	; 140
     1bc:	f8 e0       	ldi	r31, 0x08	; 8
     1be:	80 81       	ld	r24, Z
     1c0:	a3 81       	ldd	r26, Z+3	; 0x03
     1c2:	b4 81       	ldd	r27, Z+4	; 0x04
     1c4:	a8 0f       	add	r26, r24
     1c6:	b1 1d       	adc	r27, r1
     1c8:	9c 93       	st	X, r25
     1ca:	80 81       	ld	r24, Z
     1cc:	48 2f       	mov	r20, r24
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	22 81       	ldd	r18, Z+2	; 0x02
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	31 09       	sbc	r19, r1
     1d8:	42 17       	cp	r20, r18
     1da:	53 07       	cpc	r21, r19
     1dc:	11 f0       	breq	.+4      	; 0x1e2 <__vector_18+0x74>
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <__vector_18+0x76>
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <ring_buffer_in>
     1e8:	ff 91       	pop	r31
     1ea:	ef 91       	pop	r30
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <PopulateWaveTable>:
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	60 97       	sbiw	r28, 0x10	; 16
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	69 83       	std	Y+1, r22	; 0x01
     240:	7a 83       	std	Y+2, r23	; 0x02
     242:	8b 83       	std	Y+3, r24	; 0x03
     244:	9c 83       	std	Y+4, r25	; 0x04
     246:	2d 83       	std	Y+5, r18	; 0x05
     248:	3e 83       	std	Y+6, r19	; 0x06
     24a:	4f 83       	std	Y+7, r20	; 0x07
     24c:	58 87       	std	Y+8, r21	; 0x08
     24e:	23 e0       	ldi	r18, 0x03	; 3
     250:	e2 16       	cp	r14, r18
     252:	f1 04       	cpc	r15, r1
     254:	e9 f0       	breq	.+58     	; 0x290 <PopulateWaveTable+0x86>
     256:	4c f4       	brge	.+18     	; 0x26a <PopulateWaveTable+0x60>
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	e8 16       	cp	r14, r24
     25c:	f1 04       	cpc	r15, r1
     25e:	71 f0       	breq	.+28     	; 0x27c <PopulateWaveTable+0x72>
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	e9 16       	cp	r14, r25
     264:	f1 04       	cpc	r15, r1
     266:	79 f0       	breq	.+30     	; 0x286 <PopulateWaveTable+0x7c>
     268:	21 c0       	rjmp	.+66     	; 0x2ac <PopulateWaveTable+0xa2>
     26a:	e4 e0       	ldi	r30, 0x04	; 4
     26c:	ee 16       	cp	r14, r30
     26e:	f1 04       	cpc	r15, r1
     270:	a1 f0       	breq	.+40     	; 0x29a <PopulateWaveTable+0x90>
     272:	f5 e0       	ldi	r31, 0x05	; 5
     274:	ef 16       	cp	r14, r31
     276:	f1 04       	cpc	r15, r1
     278:	a9 f0       	breq	.+42     	; 0x2a4 <PopulateWaveTable+0x9a>
     27a:	18 c0       	rjmp	.+48     	; 0x2ac <PopulateWaveTable+0xa2>
     27c:	2c e1       	ldi	r18, 0x1C	; 28
     27e:	35 e0       	ldi	r19, 0x05	; 5
     280:	3e 87       	std	Y+14, r19	; 0x0e
     282:	2d 87       	std	Y+13, r18	; 0x0d
     284:	13 c0       	rjmp	.+38     	; 0x2ac <PopulateWaveTable+0xa2>
     286:	8c e1       	ldi	r24, 0x1C	; 28
     288:	94 e0       	ldi	r25, 0x04	; 4
     28a:	9e 87       	std	Y+14, r25	; 0x0e
     28c:	8d 87       	std	Y+13, r24	; 0x0d
     28e:	0e c0       	rjmp	.+28     	; 0x2ac <PopulateWaveTable+0xa2>
     290:	ec e1       	ldi	r30, 0x1C	; 28
     292:	f3 e0       	ldi	r31, 0x03	; 3
     294:	fe 87       	std	Y+14, r31	; 0x0e
     296:	ed 87       	std	Y+13, r30	; 0x0d
     298:	09 c0       	rjmp	.+18     	; 0x2ac <PopulateWaveTable+0xa2>
     29a:	2c e1       	ldi	r18, 0x1C	; 28
     29c:	31 e0       	ldi	r19, 0x01	; 1
     29e:	3e 87       	std	Y+14, r19	; 0x0e
     2a0:	2d 87       	std	Y+13, r18	; 0x0d
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <PopulateWaveTable+0xa2>
     2a4:	8c e1       	ldi	r24, 0x1C	; 28
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	9e 87       	std	Y+14, r25	; 0x0e
     2aa:	8d 87       	std	Y+13, r24	; 0x0d
     2ac:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <wave_one_index>
     2b0:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <wave_two_index>
     2b4:	ca 94       	dec	r12
     2b6:	cd 28       	or	r12, r13
     2b8:	09 f0       	breq	.+2      	; 0x2bc <PopulateWaveTable+0xb2>
     2ba:	0c c1       	rjmp	.+536    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     2bc:	20 90 91 08 	lds	r2, 0x0891	; 0x800891 <threshold_freq_int>
     2c0:	30 90 92 08 	lds	r3, 0x0892	; 0x800892 <threshold_freq_int+0x1>
     2c4:	c1 01       	movw	r24, r2
     2c6:	b8 01       	movw	r22, r16
     2c8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__divmodhi4>
     2cc:	70 93 58 06 	sts	0x0658, r23	; 0x800658 <repeat_count_1+0x1>
     2d0:	60 93 57 06 	sts	0x0657, r22	; 0x800657 <repeat_count_1>
     2d4:	c0 90 87 08 	lds	r12, 0x0887	; 0x800887 <threshold_freq_float>
     2d8:	d0 90 88 08 	lds	r13, 0x0888	; 0x800888 <threshold_freq_float+0x1>
     2dc:	e0 90 89 08 	lds	r14, 0x0889	; 0x800889 <threshold_freq_float+0x2>
     2e0:	f0 90 8a 08 	lds	r15, 0x088A	; 0x80088a <threshold_freq_float+0x3>
     2e4:	b8 01       	movw	r22, r16
     2e6:	01 2e       	mov	r0, r17
     2e8:	00 0c       	add	r0, r0
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     2f2:	4b 01       	movw	r8, r22
     2f4:	5c 01       	movw	r10, r24
     2f6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <scale>
     2fa:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <scale+0x1>
     2fe:	07 2e       	mov	r0, r23
     300:	00 0c       	add	r0, r0
     302:	88 0b       	sbc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     30a:	2b 01       	movw	r4, r22
     30c:	3c 01       	movw	r6, r24
     30e:	e0 91 57 06 	lds	r30, 0x0657	; 0x800657 <repeat_count_1>
     312:	f0 91 58 06 	lds	r31, 0x0658	; 0x800658 <repeat_count_1+0x1>
     316:	f8 8b       	std	Y+16, r31	; 0x10
     318:	ef 87       	std	Y+15, r30	; 0x0f
     31a:	a5 01       	movw	r20, r10
     31c:	94 01       	movw	r18, r8
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     326:	69 87       	std	Y+9, r22	; 0x09
     328:	7a 87       	std	Y+10, r23	; 0x0a
     32a:	8b 87       	std	Y+11, r24	; 0x0b
     32c:	9c 87       	std	Y+12, r25	; 0x0c
     32e:	2f 85       	ldd	r18, Y+15	; 0x0f
     330:	38 89       	ldd	r19, Y+16	; 0x10
     332:	b9 01       	movw	r22, r18
     334:	33 0f       	add	r19, r19
     336:	88 0b       	sbc	r24, r24
     338:	99 0b       	sbc	r25, r25
     33a:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     33e:	9b 01       	movw	r18, r22
     340:	ac 01       	movw	r20, r24
     342:	69 85       	ldd	r22, Y+9	; 0x09
     344:	7a 85       	ldd	r23, Y+10	; 0x0a
     346:	8b 85       	ldd	r24, Y+11	; 0x0b
     348:	9c 85       	ldd	r25, Y+12	; 0x0c
     34a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     34e:	9b 01       	movw	r18, r22
     350:	ac 01       	movw	r20, r24
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e8       	ldi	r24, 0x80	; 128
     358:	9f e3       	ldi	r25, 0x3F	; 63
     35a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     35e:	a3 01       	movw	r20, r6
     360:	92 01       	movw	r18, r4
     362:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     366:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fixsfsi>
     36a:	70 93 51 06 	sts	0x0651, r23	; 0x800651 <threshold_rep_1+0x1>
     36e:	60 93 50 06 	sts	0x0650, r22	; 0x800650 <threshold_rep_1>
     372:	c8 01       	movw	r24, r16
     374:	b1 01       	movw	r22, r2
     376:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__divmodhi4>
     37a:	70 93 5e 08 	sts	0x085E, r23	; 0x80085e <inverse_repeat_1+0x1>
     37e:	60 93 5d 08 	sts	0x085D, r22	; 0x80085d <inverse_repeat_1>
     382:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <inverse_repeat_1>
     386:	90 91 5e 08 	lds	r25, 0x085E	; 0x80085e <inverse_repeat_1+0x1>
     38a:	9a 87       	std	Y+10, r25	; 0x0a
     38c:	89 87       	std	Y+9, r24	; 0x09
     38e:	a7 01       	movw	r20, r14
     390:	96 01       	movw	r18, r12
     392:	c5 01       	movw	r24, r10
     394:	b4 01       	movw	r22, r8
     396:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     39a:	6b 01       	movw	r12, r22
     39c:	7c 01       	movw	r14, r24
     39e:	e9 85       	ldd	r30, Y+9	; 0x09
     3a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     3a2:	bf 01       	movw	r22, r30
     3a4:	ff 0f       	add	r31, r31
     3a6:	88 0b       	sbc	r24, r24
     3a8:	99 0b       	sbc	r25, r25
     3aa:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     3ae:	9b 01       	movw	r18, r22
     3b0:	ac 01       	movw	r20, r24
     3b2:	c7 01       	movw	r24, r14
     3b4:	b6 01       	movw	r22, r12
     3b6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     3ba:	9b 01       	movw	r18, r22
     3bc:	ac 01       	movw	r20, r24
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e8       	ldi	r24, 0x80	; 128
     3c4:	9f e3       	ldi	r25, 0x3F	; 63
     3c6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     3ca:	a3 01       	movw	r20, r6
     3cc:	92 01       	movw	r18, r4
     3ce:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     3d2:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fixsfsi>
     3d6:	70 93 4f 06 	sts	0x064F, r23	; 0x80064f <threshold_skip_1+0x1>
     3da:	60 93 4e 06 	sts	0x064E, r22	; 0x80064e <threshold_skip_1>
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e4       	ldi	r20, 0x40	; 64
     3e4:	50 e4       	ldi	r21, 0x40	; 64
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	9c 81       	ldd	r25, Y+4	; 0x04
     3ee:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     3f2:	4b 01       	movw	r8, r22
     3f4:	5c 01       	movw	r10, r24
     3f6:	29 81       	ldd	r18, Y+1	; 0x01
     3f8:	3a 81       	ldd	r19, Y+2	; 0x02
     3fa:	4b 81       	ldd	r20, Y+3	; 0x03
     3fc:	5c 81       	ldd	r21, Y+4	; 0x04
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e4       	ldi	r24, 0x40	; 64
     404:	90 e4       	ldi	r25, 0x40	; 64
     406:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4e ef       	ldi	r20, 0xFE	; 254
     410:	52 e4       	ldi	r21, 0x42	; 66
     412:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 e4       	ldi	r20, 0x40	; 64
     41c:	50 e4       	ldi	r21, 0x40	; 64
     41e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     422:	2b 01       	movw	r4, r22
     424:	3c 01       	movw	r6, r24
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e4       	ldi	r20, 0x40	; 64
     42c:	50 e4       	ldi	r21, 0x40	; 64
     42e:	6d 81       	ldd	r22, Y+5	; 0x05
     430:	7e 81       	ldd	r23, Y+6	; 0x06
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	4e ef       	ldi	r20, 0xFE	; 254
     440:	52 e4       	ldi	r21, 0x42	; 66
     442:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     446:	69 83       	std	Y+1, r22	; 0x01
     448:	7a 83       	std	Y+2, r23	; 0x02
     44a:	8b 83       	std	Y+3, r24	; 0x03
     44c:	9c 83       	std	Y+4, r25	; 0x04
     44e:	0d 85       	ldd	r16, Y+13	; 0x0d
     450:	1e 85       	ldd	r17, Y+14	; 0x0e
     452:	2a e5       	ldi	r18, 0x5A	; 90
     454:	37 e0       	ldi	r19, 0x07	; 7
     456:	0f 2e       	mov	r0, r31
     458:	fa e5       	ldi	r31, 0x5A	; 90
     45a:	ef 2e       	mov	r14, r31
     45c:	f8 e0       	ldi	r31, 0x08	; 8
     45e:	ff 2e       	mov	r15, r31
     460:	f0 2d       	mov	r31, r0
     462:	dd 24       	eor	r13, r13
     464:	da 94       	dec	r13
     466:	3e 83       	std	Y+6, r19	; 0x06
     468:	2d 83       	std	Y+5, r18	; 0x05
     46a:	f8 01       	movw	r30, r16
     46c:	61 91       	ld	r22, Z+
     46e:	8f 01       	movw	r16, r30
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     47a:	a5 01       	movw	r20, r10
     47c:	94 01       	movw	r18, r8
     47e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     482:	a3 01       	movw	r20, r6
     484:	92 01       	movw	r18, r4
     486:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__addsf3>
     48a:	29 81       	ldd	r18, Y+1	; 0x01
     48c:	3a 81       	ldd	r19, Y+2	; 0x02
     48e:	4b 81       	ldd	r20, Y+3	; 0x03
     490:	5c 81       	ldd	r21, Y+4	; 0x04
     492:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     496:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fixsfsi>
     49a:	86 2f       	mov	r24, r22
     49c:	97 2f       	mov	r25, r23
     49e:	8f 3f       	cpi	r24, 0xFF	; 255
     4a0:	91 05       	cpc	r25, r1
     4a2:	29 f0       	breq	.+10     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a4:	24 f0       	brlt	.+8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a6:	ed 81       	ldd	r30, Y+5	; 0x05
     4a8:	fe 81       	ldd	r31, Y+6	; 0x06
     4aa:	d0 82       	st	Z, r13
     4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4ae:	99 23       	and	r25, r25
     4b0:	24 f4       	brge	.+8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b2:	ed 81       	ldd	r30, Y+5	; 0x05
     4b4:	fe 81       	ldd	r31, Y+6	; 0x06
     4b6:	10 82       	st	Z, r1
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4ba:	ed 81       	ldd	r30, Y+5	; 0x05
     4bc:	fe 81       	ldd	r31, Y+6	; 0x06
     4be:	60 83       	st	Z, r22
     4c0:	2d 81       	ldd	r18, Y+5	; 0x05
     4c2:	3e 81       	ldd	r19, Y+6	; 0x06
     4c4:	2f 5f       	subi	r18, 0xFF	; 255
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	3e 83       	std	Y+6, r19	; 0x06
     4ca:	2d 83       	std	Y+5, r18	; 0x05
     4cc:	2e 15       	cp	r18, r14
     4ce:	3f 05       	cpc	r19, r15
     4d0:	61 f6       	brne	.-104    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     4d2:	06 c1       	rjmp	.+524    	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
     4d4:	20 90 91 08 	lds	r2, 0x0891	; 0x800891 <threshold_freq_int>
     4d8:	30 90 92 08 	lds	r3, 0x0892	; 0x800892 <threshold_freq_int+0x1>
     4dc:	c1 01       	movw	r24, r2
     4de:	b8 01       	movw	r22, r16
     4e0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__divmodhi4>
     4e4:	70 93 49 06 	sts	0x0649, r23	; 0x800649 <repeat_count_2+0x1>
     4e8:	60 93 48 06 	sts	0x0648, r22	; 0x800648 <repeat_count_2>
     4ec:	c0 90 87 08 	lds	r12, 0x0887	; 0x800887 <threshold_freq_float>
     4f0:	d0 90 88 08 	lds	r13, 0x0888	; 0x800888 <threshold_freq_float+0x1>
     4f4:	e0 90 89 08 	lds	r14, 0x0889	; 0x800889 <threshold_freq_float+0x2>
     4f8:	f0 90 8a 08 	lds	r15, 0x088A	; 0x80088a <threshold_freq_float+0x3>
     4fc:	b8 01       	movw	r22, r16
     4fe:	01 2e       	mov	r0, r17
     500:	00 0c       	add	r0, r0
     502:	88 0b       	sbc	r24, r24
     504:	99 0b       	sbc	r25, r25
     506:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     50a:	2b 01       	movw	r4, r22
     50c:	3c 01       	movw	r6, r24
     50e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <scale>
     512:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <scale+0x1>
     516:	07 2e       	mov	r0, r23
     518:	00 0c       	add	r0, r0
     51a:	88 0b       	sbc	r24, r24
     51c:	99 0b       	sbc	r25, r25
     51e:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     522:	4b 01       	movw	r8, r22
     524:	5c 01       	movw	r10, r24
     526:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <repeat_count_2>
     52a:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <repeat_count_2+0x1>
     52e:	98 8b       	std	Y+16, r25	; 0x10
     530:	8f 87       	std	Y+15, r24	; 0x0f
     532:	a3 01       	movw	r20, r6
     534:	92 01       	movw	r18, r4
     536:	c7 01       	movw	r24, r14
     538:	b6 01       	movw	r22, r12
     53a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     53e:	69 87       	std	Y+9, r22	; 0x09
     540:	7a 87       	std	Y+10, r23	; 0x0a
     542:	8b 87       	std	Y+11, r24	; 0x0b
     544:	9c 87       	std	Y+12, r25	; 0x0c
     546:	ef 85       	ldd	r30, Y+15	; 0x0f
     548:	f8 89       	ldd	r31, Y+16	; 0x10
     54a:	bf 01       	movw	r22, r30
     54c:	ff 0f       	add	r31, r31
     54e:	88 0b       	sbc	r24, r24
     550:	99 0b       	sbc	r25, r25
     552:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     556:	9b 01       	movw	r18, r22
     558:	ac 01       	movw	r20, r24
     55a:	69 85       	ldd	r22, Y+9	; 0x09
     55c:	7a 85       	ldd	r23, Y+10	; 0x0a
     55e:	8b 85       	ldd	r24, Y+11	; 0x0b
     560:	9c 85       	ldd	r25, Y+12	; 0x0c
     562:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	9f e3       	ldi	r25, 0x3F	; 63
     572:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__subsf3>
     576:	a5 01       	movw	r20, r10
     578:	94 01       	movw	r18, r8
     57a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     57e:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fixsfsi>
     582:	70 93 43 06 	sts	0x0643, r23	; 0x800643 <threshold_rep_2+0x1>
     586:	60 93 42 06 	sts	0x0642, r22	; 0x800642 <threshold_rep_2>
     58a:	c8 01       	movw	r24, r16
     58c:	b1 01       	movw	r22, r2
     58e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__divmodhi4>
     592:	70 93 5b 08 	sts	0x085B, r23	; 0x80085b <inverse_repeat_2+0x1>
     596:	60 93 5a 08 	sts	0x085A, r22	; 0x80085a <inverse_repeat_2>
     59a:	20 91 5a 08 	lds	r18, 0x085A	; 0x80085a <inverse_repeat_2>
     59e:	30 91 5b 08 	lds	r19, 0x085B	; 0x80085b <inverse_repeat_2+0x1>
     5a2:	3a 87       	std	Y+10, r19	; 0x0a
     5a4:	29 87       	std	Y+9, r18	; 0x09
     5a6:	a7 01       	movw	r20, r14
     5a8:	96 01       	movw	r18, r12
     5aa:	c3 01       	movw	r24, r6
     5ac:	b2 01       	movw	r22, r4
     5ae:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     5b2:	6b 01       	movw	r12, r22
     5b4:	7c 01       	movw	r14, r24
     5b6:	e9 85       	ldd	r30, Y+9	; 0x09
     5b8:	fa 85       	ldd	r31, Y+10	; 0x0a
     5ba:	bf 01       	movw	r22, r30
     5bc:	ff 0f       	add	r31, r31
     5be:	88 0b       	sbc	r24, r24
     5c0:	99 0b       	sbc	r25, r25
     5c2:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	c7 01       	movw	r24, r14
     5cc:	b6 01       	movw	r22, r12
     5ce:	d9 d7       	rcall	.+4018   	; 0x1582 <__subsf3>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 e8       	ldi	r24, 0x80	; 128
     5da:	9f e3       	ldi	r25, 0x3F	; 63
     5dc:	d2 d7       	rcall	.+4004   	; 0x1582 <__subsf3>
     5de:	a5 01       	movw	r20, r10
     5e0:	94 01       	movw	r18, r8
     5e2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     5e6:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fixsfsi>
     5ea:	70 93 41 06 	sts	0x0641, r23	; 0x800641 <threshold_skip_2+0x1>
     5ee:	60 93 40 06 	sts	0x0640, r22	; 0x800640 <threshold_skip_2>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e4       	ldi	r20, 0x40	; 64
     5f8:	50 e4       	ldi	r21, 0x40	; 64
     5fa:	69 81       	ldd	r22, Y+1	; 0x01
     5fc:	7a 81       	ldd	r23, Y+2	; 0x02
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     606:	4b 01       	movw	r8, r22
     608:	5c 01       	movw	r10, r24
     60a:	29 81       	ldd	r18, Y+1	; 0x01
     60c:	3a 81       	ldd	r19, Y+2	; 0x02
     60e:	4b 81       	ldd	r20, Y+3	; 0x03
     610:	5c 81       	ldd	r21, Y+4	; 0x04
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	90 e4       	ldi	r25, 0x40	; 64
     61a:	b3 d7       	rcall	.+3942   	; 0x1582 <__subsf3>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	4e ef       	ldi	r20, 0xFE	; 254
     622:	52 e4       	ldi	r21, 0x42	; 66
     624:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e4       	ldi	r20, 0x40	; 64
     62e:	50 e4       	ldi	r21, 0x40	; 64
     630:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     634:	2b 01       	movw	r4, r22
     636:	3c 01       	movw	r6, r24
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e4       	ldi	r20, 0x40	; 64
     63e:	50 e4       	ldi	r21, 0x40	; 64
     640:	6d 81       	ldd	r22, Y+5	; 0x05
     642:	7e 81       	ldd	r23, Y+6	; 0x06
     644:	8f 81       	ldd	r24, Y+7	; 0x07
     646:	98 85       	ldd	r25, Y+8	; 0x08
     648:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	4e ef       	ldi	r20, 0xFE	; 254
     652:	52 e4       	ldi	r21, 0x42	; 66
     654:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     658:	69 83       	std	Y+1, r22	; 0x01
     65a:	7a 83       	std	Y+2, r23	; 0x02
     65c:	8b 83       	std	Y+3, r24	; 0x03
     65e:	9c 83       	std	Y+4, r25	; 0x04
     660:	0d 85       	ldd	r16, Y+13	; 0x0d
     662:	1e 85       	ldd	r17, Y+14	; 0x0e
     664:	2a e5       	ldi	r18, 0x5A	; 90
     666:	36 e0       	ldi	r19, 0x06	; 6
     668:	0f 2e       	mov	r0, r31
     66a:	fa e5       	ldi	r31, 0x5A	; 90
     66c:	ef 2e       	mov	r14, r31
     66e:	f7 e0       	ldi	r31, 0x07	; 7
     670:	ff 2e       	mov	r15, r31
     672:	f0 2d       	mov	r31, r0
     674:	dd 24       	eor	r13, r13
     676:	da 94       	dec	r13
     678:	3e 83       	std	Y+6, r19	; 0x06
     67a:	2d 83       	std	Y+5, r18	; 0x05
     67c:	f8 01       	movw	r30, r16
     67e:	61 91       	ld	r22, Z+
     680:	8f 01       	movw	r16, r30
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 c5 0b 	call	0x178a	; 0x178a <__floatsisf>
     68c:	a5 01       	movw	r20, r10
     68e:	94 01       	movw	r18, r8
     690:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__mulsf3>
     694:	a3 01       	movw	r20, r6
     696:	92 01       	movw	r18, r4
     698:	75 d7       	rcall	.+3818   	; 0x1584 <__addsf3>
     69a:	29 81       	ldd	r18, Y+1	; 0x01
     69c:	3a 81       	ldd	r19, Y+2	; 0x02
     69e:	4b 81       	ldd	r20, Y+3	; 0x03
     6a0:	5c 81       	ldd	r21, Y+4	; 0x04
     6a2:	6f d7       	rcall	.+3806   	; 0x1582 <__subsf3>
     6a4:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fixsfsi>
     6a8:	86 2f       	mov	r24, r22
     6aa:	97 2f       	mov	r25, r23
     6ac:	8f 3f       	cpi	r24, 0xFF	; 255
     6ae:	91 05       	cpc	r25, r1
     6b0:	29 f0       	breq	.+10     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6b2:	24 f0       	brlt	.+8      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6b4:	ed 81       	ldd	r30, Y+5	; 0x05
     6b6:	fe 81       	ldd	r31, Y+6	; 0x06
     6b8:	d0 82       	st	Z, r13
     6ba:	09 c0       	rjmp	.+18     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6bc:	99 23       	and	r25, r25
     6be:	24 f4       	brge	.+8      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
     6c0:	ed 81       	ldd	r30, Y+5	; 0x05
     6c2:	fe 81       	ldd	r31, Y+6	; 0x06
     6c4:	10 82       	st	Z, r1
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6c8:	ed 81       	ldd	r30, Y+5	; 0x05
     6ca:	fe 81       	ldd	r31, Y+6	; 0x06
     6cc:	60 83       	st	Z, r22
     6ce:	2d 81       	ldd	r18, Y+5	; 0x05
     6d0:	3e 81       	ldd	r19, Y+6	; 0x06
     6d2:	2f 5f       	subi	r18, 0xFF	; 255
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	3e 83       	std	Y+6, r19	; 0x06
     6d8:	2d 83       	std	Y+5, r18	; 0x05
     6da:	2e 15       	cp	r18, r14
     6dc:	3f 05       	cpc	r19, r15
     6de:	71 f6       	brne	.-100    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     6e0:	60 96       	adiw	r28, 0x10	; 16
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	bf 90       	pop	r11
     6fe:	af 90       	pop	r10
     700:	9f 90       	pop	r9
     702:	8f 90       	pop	r8
     704:	7f 90       	pop	r7
     706:	6f 90       	pop	r6
     708:	5f 90       	pop	r5
     70a:	4f 90       	pop	r4
     70c:	3f 90       	pop	r3
     70e:	2f 90       	pop	r2
     710:	08 95       	ret

00000712 <__vector_11>:
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <one_second_interrup+0x1>
     728:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <one_second_interrup>
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <StartSend>:
     73a:	84 ea       	ldi	r24, 0xA4	; 164
     73c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     740:	81 e1       	ldi	r24, 0x11	; 17
     742:	97 e2       	ldi	r25, 0x27	; 39
     744:	ec eb       	ldi	r30, 0xBC	; 188
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <StartSend+0x14>
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	89 f0       	breq	.+34     	; 0x770 <StartSend+0x36>
     74e:	20 81       	ld	r18, Z
     750:	22 23       	and	r18, r18
     752:	dc f7       	brge	.-10     	; 0x74a <StartSend+0x10>
     754:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     758:	88 7f       	andi	r24, 0xF8	; 248
     75a:	88 30       	cpi	r24, 0x08	; 8
     75c:	61 f0       	breq	.+24     	; 0x776 <StartSend+0x3c>
     75e:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     762:	28 7f       	andi	r18, 0xF8	; 248
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	20 31       	cpi	r18, 0x10	; 16
     76a:	39 f4       	brne	.+14     	; 0x77a <StartSend+0x40>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	08 95       	ret
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	08 95       	ret

0000077c <ControlSend>:
    addr = (addr  <<  1);

    int controlByte = addr + read;

    //  send
    TWDR = controlByte;
     77c:	66 0f       	add	r22, r22
     77e:	86 0f       	add	r24, r22
     780:	91 1d       	adc	r25, r1
     782:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1  <<  TWINT) | (1  <<  TWEN);
     786:	84 e8       	ldi	r24, 0x84	; 132
     788:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    int counter = 0;
    //  Wait for ACK or NACK response
    while (!(TWCR & (1  <<  TWINT))) {
     78c:	81 e1       	ldi	r24, 0x11	; 17
     78e:	97 e2       	ldi	r25, 0x27	; 39
     790:	ec eb       	ldi	r30, 0xBC	; 188
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <ControlSend+0x1e>
     796:	01 97       	sbiw	r24, 0x01	; 1
        counter++;
        if (counter > 10000) {
     798:	89 f0       	breq	.+34     	; 0x7bc <ControlSend+0x40>
    TWDR = controlByte;
    TWCR = (1  <<  TWINT) | (1  <<  TWEN);

    int counter = 0;
    //  Wait for ACK or NACK response
    while (!(TWCR & (1  <<  TWINT))) {
     79a:	20 81       	ld	r18, Z
     79c:	22 23       	and	r18, r18
     79e:	dc f7       	brge	.-10     	; 0x796 <ControlSend+0x1a>
            //  took too long - time out
            return 3;
        }
    }
    //  if not ACK then error
    if ((TWSR & 0xF8) != TW_MT_SLA_ACK && (TWSR & 0xF8) != TW_MR_SLA_ACK) {
     7a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7a4:	88 7f       	andi	r24, 0xF8	; 248
     7a6:	88 31       	cpi	r24, 0x18	; 24
     7a8:	61 f0       	breq	.+24     	; 0x7c2 <ControlSend+0x46>
     7aa:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    //  Wait for ACK or NACK response
    while (!(TWCR & (1  <<  TWINT))) {
        counter++;
        if (counter > 10000) {
            //  took too long - time out
            return 3;
     7ae:	28 7f       	andi	r18, 0xF8	; 248
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	20 34       	cpi	r18, 0x40	; 64
     7b6:	39 f4       	brne	.+14     	; 0x7c6 <ControlSend+0x4a>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	08 95       	ret
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	08 95       	ret
    //  if not ACK then error
    if ((TWSR & 0xF8) != TW_MT_SLA_ACK && (TWSR & 0xF8) != TW_MR_SLA_ACK) {
        return 1;
    }

    return 0;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
}
     7c6:	08 95       	ret

000007c8 <DataSend>:
 * \param Data to send
 * \retval Return 1 on failure, 3 on time out, 0 on success
 */
int DataSend(int data) {
    //  send through data
    TWDR = data;
     7c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1  <<  TWINT) | (1  <<  TWEN);
     7cc:	84 e8       	ldi	r24, 0x84	; 132
     7ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    int counter;
    //  Wait for ACK or NACK
    while (!(TWCR & (1  <<  TWINT))) {
     7d2:	ec eb       	ldi	r30, 0xBC	; 188
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <DataSend+0x1c>
        counter++;
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
        if (counter > 10000) {
     7dc:	21 31       	cpi	r18, 0x11	; 17
     7de:	87 e2       	ldi	r24, 0x27	; 39
     7e0:	38 07       	cpc	r19, r24
     7e2:	64 f4       	brge	.+24     	; 0x7fc <DataSend+0x34>
    TWDR = data;
    TWCR = (1  <<  TWINT) | (1  <<  TWEN);

    int counter;
    //  Wait for ACK or NACK
    while (!(TWCR & (1  <<  TWINT))) {
     7e4:	80 81       	ld	r24, Z
     7e6:	88 23       	and	r24, r24
     7e8:	bc f7       	brge	.-18     	; 0x7d8 <DataSend+0x10>
            return 3;
        }
    }

    //  if not ACK then error
    if ((TWSR & 0xF8) != TW_MT_DATA_ACK) {
     7ea:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    int counter;
    //  Wait for ACK or NACK
    while (!(TWCR & (1  <<  TWINT))) {
        counter++;
        if (counter > 10000) {
            return 3;
     7ee:	28 7f       	andi	r18, 0xF8	; 248
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	28 32       	cpi	r18, 0x28	; 40
     7f6:	21 f4       	brne	.+8      	; 0x800 <DataSend+0x38>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	08 95       	ret
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	90 e0       	ldi	r25, 0x00	; 0
    if ((TWSR & 0xF8) != TW_MT_DATA_ACK) {
        return 1;
    }

    return 0;
}
     800:	08 95       	ret

00000802 <DataGet>:
 * \retval Data read, 0 on timeout
 */
unsigned char DataGet(unsigned char last) {
    register unsigned char data = 0;

    if (last) {
     802:	88 23       	and	r24, r24
     804:	31 f0       	breq	.+12     	; 0x812 <DataGet+0x10>
        //  send NACK after receiving data
        TWCR &= (~(1  <<  TWEA));
     806:	ec eb       	ldi	r30, 0xBC	; 188
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	8f 7b       	andi	r24, 0xBF	; 191
     80e:	80 83       	st	Z, r24
     810:	05 c0       	rjmp	.+10     	; 0x81c <DataGet+0x1a>
        } else {
        TWCR |= (1  <<  TWEA);
     812:	ec eb       	ldi	r30, 0xBC	; 188
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	80 64       	ori	r24, 0x40	; 64
     81a:	80 83       	st	Z, r24
    }

    TWCR |= (1  <<  TWINT);
     81c:	ec eb       	ldi	r30, 0xBC	; 188
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	80 68       	ori	r24, 0x80	; 128
     824:	80 83       	st	Z, r24

    int counter = 0;
    //  Wait for data to be received
    while (!(TWCR & (1  <<  TWINT))) {
     826:	81 e1       	ldi	r24, 0x11	; 17
     828:	97 e2       	ldi	r25, 0x27	; 39
     82a:	02 c0       	rjmp	.+4      	; 0x830 <DataGet+0x2e>
     82c:	01 97       	sbiw	r24, 0x01	; 1
        counter++;
        if (counter > 10000) {
     82e:	81 f0       	breq	.+32     	; 0x850 <DataGet+0x4e>

    TWCR |= (1  <<  TWINT);

    int counter = 0;
    //  Wait for data to be received
    while (!(TWCR & (1  <<  TWINT))) {
     830:	20 81       	ld	r18, Z
     832:	22 23       	and	r18, r18
     834:	dc f7       	brge	.-10     	; 0x82c <DataGet+0x2a>
        if (counter > 10000) {
            return 0;
        }
    }

    if ((TWSR & 0xF8) == TW_MR_DATA_ACK || (TWSR & 0xF8) == TW_MR_DATA_NACK) {
     836:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     83a:	88 7f       	andi	r24, 0xF8	; 248
     83c:	80 35       	cpi	r24, 0x50	; 80
     83e:	29 f0       	breq	.+10     	; 0x84a <DataGet+0x48>
     840:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     844:	88 7f       	andi	r24, 0xF8	; 248
     846:	88 35       	cpi	r24, 0x58	; 88
     848:	29 f4       	brne	.+10     	; 0x854 <DataGet+0x52>
        data = TWDR;
     84a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     84e:	08 95       	ret
    int counter = 0;
    //  Wait for data to be received
    while (!(TWCR & (1  <<  TWINT))) {
        counter++;
        if (counter > 10000) {
            return 0;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret
 * \brief Get the temperature sensor data.
 * \param last is 1 if want the last byte, sends NACK
 * \retval Data read, 0 on timeout
 */
unsigned char DataGet(unsigned char last) {
    register unsigned char data = 0;
     854:	80 e0       	ldi	r24, 0x00	; 0
    if ((TWSR & 0xF8) == TW_MR_DATA_ACK || (TWSR & 0xF8) == TW_MR_DATA_NACK) {
        data = TWDR;
    }

    return data;
}
     856:	08 95       	ret

00000858 <GetTemp>:
/**
 * \brief Read the temperature from the temp sensor
 * \param Address to communicate to
 * \retval Null
 */
void GetTemp(unsigned char addr) {
     858:	cf 93       	push	r28
    int temp = 0;
    if (StartSend() != 3) {
     85a:	c8 2f       	mov	r28, r24
     85c:	6e df       	rcall	.-292    	; 0x73a <StartSend>
     85e:	03 97       	sbiw	r24, 0x03	; 3
     860:	09 f4       	brne	.+2      	; 0x864 <GetTemp+0xc>
            ControlSend(WRITE, addr);
     862:	d2 c0       	rjmp	.+420    	; 0xa08 <__stack+0x109>
     864:	6c 2f       	mov	r22, r28
     866:	80 e0       	ldi	r24, 0x00	; 0
            DataSend(0x51);
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	88 df       	rcall	.-240    	; 0x77c <ControlSend>
 * \brief Stops I2C
 * \param Null
 * \retval Null
 */
void StopSend(void) {
    TWCR = (1  <<  TWINT) | (1  <<  TWEN) | (1  <<  TWSTO);
     86c:	81 e5       	ldi	r24, 0x51	; 81
     86e:	90 e0       	ldi	r25, 0x00	; 0
    int temp = 0;
    if (StartSend() != 3) {
            ControlSend(WRITE, addr);
            DataSend(0x51);
            StopSend();
            StartSend();
     870:	ab df       	rcall	.-170    	; 0x7c8 <DataSend>
            ControlSend(WRITE, addr);
     872:	84 e9       	ldi	r24, 0x94	; 148
     874:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            DataSend(0xAA);
     878:	60 df       	rcall	.-320    	; 0x73a <StartSend>
     87a:	6c 2f       	mov	r22, r28
            StartSend();
     87c:	80 e0       	ldi	r24, 0x00	; 0
            ControlSend(READ, addr);
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	7d df       	rcall	.-262    	; 0x77c <ControlSend>
     882:	8a ea       	ldi	r24, 0xAA	; 170
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	a0 df       	rcall	.-192    	; 0x7c8 <DataSend>
            temperature_msb = DataGet(0);  //  msb of temperature
     888:	58 df       	rcall	.-336    	; 0x73a <StartSend>
     88a:	6c 2f       	mov	r22, r28
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	75 df       	rcall	.-278    	; 0x77c <ControlSend>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	b6 df       	rcall	.-148    	; 0x802 <DataGet>
     896:	90 e0       	ldi	r25, 0x00	; 0
            int sigValue = temperature_msb/10;
            UartPutChar(sigValue+'0');
     898:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <temperature_msb+0x1>
     89c:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <temperature_msb>
     8a0:	6a e0       	ldi	r22, 0x0A	; 10
     8a2:	70 e0       	ldi	r23, 0x00	; 0
 * \param data the data to add to the UART buffer and send
 *    Adapted from example AVR code (AFS license)
 */
static inline void UartPutChar(uint8_t data) {
    //  Disable interrupts to get exclusive access to ring_buffer_out.
    cli();
     8a4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__divmodhi4>
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     8a8:	90 e3       	ldi	r25, 0x30	; 48
     8aa:	96 0f       	add	r25, r22
     8ac:	f8 94       	cli
    if (ring_buffer_is_empty(&ring_buffer_out)) {
     8ae:	e4 e9       	ldi	r30, 0x94	; 148
     8b0:	f8 e0       	ldi	r31, 0x08	; 8
        //  First data in buffer, enable data ready interrupt
        UCSR0B |=  (1  <<  UDRIE0);
     8b2:	21 81       	ldd	r18, Z+1	; 0x01
     8b4:	80 81       	ld	r24, Z
     8b6:	28 13       	cpse	r18, r24
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <GetTemp+0x6c>
     8ba:	e1 ec       	ldi	r30, 0xC1	; 193
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	80 62       	ori	r24, 0x20	; 32
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     8c2:	80 83       	st	Z, r24
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     8c4:	e4 e9       	ldi	r30, 0x94	; 148
     8c6:	f8 e0       	ldi	r31, 0x08	; 8
     8c8:	41 81       	ldd	r20, Z+1	; 0x01
     8ca:	80 81       	ld	r24, Z
     8cc:	a8 2f       	mov	r26, r24
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	22 81       	ldd	r18, Z+2	; 0x02
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	21 50       	subi	r18, 0x01	; 1
     8d6:	31 09       	sbc	r19, r1
     8d8:	a2 17       	cp	r26, r18
     8da:	b3 07       	cpc	r27, r19
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <GetTemp+0x8a>
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <GetTemp+0x8c>
	ring->buffer[ring->write_offset] = data;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	48 13       	cpse	r20, r24
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <GetTemp+0x92>
     8e8:	ff cf       	rjmp	.-2      	; 0x8e8 <GetTemp+0x90>
     8ea:	e4 e9       	ldi	r30, 0x94	; 148
     8ec:	f8 e0       	ldi	r31, 0x08	; 8
     8ee:	80 81       	ld	r24, Z
     8f0:	a3 81       	ldd	r26, Z+3	; 0x03
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     8f2:	b4 81       	ldd	r27, Z+4	; 0x04
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     8f4:	a8 0f       	add	r26, r24
     8f6:	b1 1d       	adc	r27, r1
     8f8:	9c 93       	st	X, r25
     8fa:	80 81       	ld	r24, Z
     8fc:	48 2f       	mov	r20, r24
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	22 81       	ldd	r18, Z+2	; 0x02
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	21 50       	subi	r18, 0x01	; 1
     906:	31 09       	sbc	r19, r1
     908:	42 17       	cp	r20, r18
     90a:	53 07       	cpc	r21, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0x13>
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
    }
    //  Put data in buffer
    ring_buffer_put(&ring_buffer_out, data);

    //  Re-enable interrupts
    sei();
     912:	80 e0       	ldi	r24, 0x00	; 0
            StartSend();
            ControlSend(READ, addr);
            temperature_msb = DataGet(0);  //  msb of temperature
            int sigValue = temperature_msb/10;
            UartPutChar(sigValue+'0');
            UartPutChar((temperature_msb-(sigValue*10))+'0');
     914:	e4 e9       	ldi	r30, 0x94	; 148
     916:	f8 e0       	ldi	r31, 0x08	; 8
 * \param data the data to add to the UART buffer and send
 *    Adapted from example AVR code (AFS license)
 */
static inline void UartPutChar(uint8_t data) {
    //  Disable interrupts to get exclusive access to ring_buffer_out.
    cli();
     918:	80 83       	st	Z, r24
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     91a:	78 94       	sei
     91c:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <temperature_msb>
    if (ring_buffer_is_empty(&ring_buffer_out)) {
     920:	f8 94       	cli
        //  First data in buffer, enable data ready interrupt
        UCSR0B |=  (1  <<  UDRIE0);
     922:	21 81       	ldd	r18, Z+1	; 0x01
     924:	90 81       	ld	r25, Z
     926:	29 13       	cpse	r18, r25
     928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
     92a:	e1 ec       	ldi	r30, 0xC1	; 193
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	90 81       	ld	r25, Z
     930:	90 62       	ori	r25, 0x20	; 32
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     932:	90 83       	st	Z, r25
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     934:	e4 e9       	ldi	r30, 0x94	; 148
     936:	f8 e0       	ldi	r31, 0x08	; 8
     938:	41 81       	ldd	r20, Z+1	; 0x01
     93a:	90 81       	ld	r25, Z
     93c:	a9 2f       	mov	r26, r25
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	22 81       	ldd	r18, Z+2	; 0x02
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	21 50       	subi	r18, 0x01	; 1
     946:	31 09       	sbc	r19, r1
     948:	a2 17       	cp	r26, r18
     94a:	b3 07       	cpc	r27, r19
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
     94c:	11 f0       	breq	.+4      	; 0x952 <__stack+0x53>
     94e:	9f 5f       	subi	r25, 0xFF	; 255
     950:	01 c0       	rjmp	.+2      	; 0x954 <__stack+0x55>
	ring->buffer[ring->write_offset] = data;
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	49 13       	cpse	r20, r25
     956:	01 c0       	rjmp	.+2      	; 0x95a <__stack+0x5b>
     958:	ff cf       	rjmp	.-2      	; 0x958 <__stack+0x59>
     95a:	e4 e9       	ldi	r30, 0x94	; 148
     95c:	f8 e0       	ldi	r31, 0x08	; 8
     95e:	90 81       	ld	r25, Z
     960:	a3 81       	ldd	r26, Z+3	; 0x03
     962:	b4 81       	ldd	r27, Z+4	; 0x04
     964:	a9 0f       	add	r26, r25
     966:	b1 1d       	adc	r27, r1
     968:	96 2f       	mov	r25, r22
     96a:	99 0f       	add	r25, r25
     96c:	29 2f       	mov	r18, r25
     96e:	22 0f       	add	r18, r18
     970:	22 0f       	add	r18, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     972:	92 0f       	add	r25, r18
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     974:	80 5d       	subi	r24, 0xD0	; 208
     976:	89 1b       	sub	r24, r25
     978:	8c 93       	st	X, r24
     97a:	80 81       	ld	r24, Z
     97c:	48 2f       	mov	r20, r24
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	22 81       	ldd	r18, Z+2	; 0x02
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	21 50       	subi	r18, 0x01	; 1
     986:	31 09       	sbc	r19, r1
     988:	42 17       	cp	r20, r18
     98a:	53 07       	cpc	r21, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     98c:	11 f0       	breq	.+4      	; 0x992 <__stack+0x93>
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	01 c0       	rjmp	.+2      	; 0x994 <__stack+0x95>
    }
    //  Put data in buffer
    ring_buffer_put(&ring_buffer_out, data);

    //  Re-enable interrupts
    sei();
     992:	80 e0       	ldi	r24, 0x00	; 0
 * \param data the data to add to the UART buffer and send
 *    Adapted from example AVR code (AFS license)
 */
static inline void UartPutChar(uint8_t data) {
    //  Disable interrupts to get exclusive access to ring_buffer_out.
    cli();
     994:	e4 e9       	ldi	r30, 0x94	; 148
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     996:	f8 e0       	ldi	r31, 0x08	; 8
     998:	80 83       	st	Z, r24
    if (ring_buffer_is_empty(&ring_buffer_out)) {
     99a:	78 94       	sei
     99c:	f8 94       	cli
        //  First data in buffer, enable data ready interrupt
        UCSR0B |=  (1  <<  UDRIE0);
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	98 13       	cpse	r25, r24
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <__stack+0xb1>
     9a6:	e1 ec       	ldi	r30, 0xC1	; 193
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	80 62       	ori	r24, 0x20	; 32
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     9ae:	80 83       	st	Z, r24
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     9b0:	e4 e9       	ldi	r30, 0x94	; 148
     9b2:	f8 e0       	ldi	r31, 0x08	; 8
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	80 81       	ld	r24, Z
     9b8:	48 2f       	mov	r20, r24
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	22 81       	ldd	r18, Z+2	; 0x02
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	31 09       	sbc	r19, r1
     9c4:	42 17       	cp	r20, r18
     9c6:	53 07       	cpc	r21, r19
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
     9c8:	11 f0       	breq	.+4      	; 0x9ce <__stack+0xcf>
     9ca:	8f 5f       	subi	r24, 0xFF	; 255
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__stack+0xd1>
	ring->buffer[ring->write_offset] = data;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	98 13       	cpse	r25, r24
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	ff cf       	rjmp	.-2      	; 0x9d4 <__stack+0xd5>
     9d6:	e4 e9       	ldi	r30, 0x94	; 148
     9d8:	f8 e0       	ldi	r31, 0x08	; 8
     9da:	80 81       	ld	r24, Z
     9dc:	a3 81       	ldd	r26, Z+3	; 0x03
     9de:	b4 81       	ldd	r27, Z+4	; 0x04
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     9e0:	a8 0f       	add	r26, r24
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     9e2:	b1 1d       	adc	r27, r1
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	8c 93       	st	X, r24
     9e8:	80 81       	ld	r24, Z
     9ea:	48 2f       	mov	r20, r24
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	22 81       	ldd	r18, Z+2	; 0x02
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	31 09       	sbc	r19, r1
     9f6:	42 17       	cp	r20, r18
     9f8:	53 07       	cpc	r21, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     9fa:	11 f0       	breq	.+4      	; 0xa00 <__stack+0x101>
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
    }
    //  Put data in buffer
    ring_buffer_put(&ring_buffer_out, data);

    //  Re-enable interrupts
    sei();
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__stack+0x103>
            int sigValue = temperature_msb/10;
            UartPutChar(sigValue+'0');
            UartPutChar((temperature_msb-(sigValue*10))+'0');
            UartPutChar('\n');
    }
}
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <ring_buffer_out>
     a06:	78 94       	sei
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <I2cInit>:
 * \brief Initializes the TWI clock
 * \param Null
 * \retval Null
 */
void I2cInit(void) {
    TWSR = 0;
     a0c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2;
     a10:	88 e4       	ldi	r24, 0x48	; 72
     a12:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     a16:	08 95       	ret

00000a18 <InterruptInit>:
 * \param Null
 * \retval Null
 */
void InterruptInit(void) {
    //  sets the pre-scaler as 1
    TCCR1B |=  (1 << WGM12)|(1 << CS12)|(0 << CS11) |(1 << CS10);
     a18:	e1 e8       	ldi	r30, 0x81	; 129
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	8d 60       	ori	r24, 0x0D	; 13
     a20:	80 83       	st	Z, r24
    //  interrupt settings
    TCNT1 = 0;  //  init the counter
     a22:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a26:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 15000;  //  initialize compare register
     a2a:	88 e9       	ldi	r24, 0x98	; 152
     a2c:	9a e3       	ldi	r25, 0x3A	; 58
     a2e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a32:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1  <<  OCIE1A);  //  enable the output compare interrupt
     a36:	ef e6       	ldi	r30, 0x6F	; 111
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	82 60       	ori	r24, 0x02	; 2
     a3e:	80 83       	st	Z, r24


    //  interrupt setting for the sampling frequency
    TCCR0B |= (0  <<  CS02)|(1 << CS01) |(0 << CS00);  //  8 prescaller
     a40:	85 b5       	in	r24, 0x25	; 37
     a42:	82 60       	ori	r24, 0x02	; 2
     a44:	85 bd       	out	0x25, r24	; 37
    TCCR0A |= (1 << WGM01);
     a46:	84 b5       	in	r24, 0x24	; 36
     a48:	82 60       	ori	r24, 0x02	; 2
     a4a:	84 bd       	out	0x24, r24	; 36
    TCNT0 = 0;
     a4c:	16 bc       	out	0x26, r1	; 38
    OCR0A = 44;
     a4e:	8c e2       	ldi	r24, 0x2C	; 44
     a50:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);  //  enable the interrup
     a52:	ee e6       	ldi	r30, 0x6E	; 110
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	82 60       	ori	r24, 0x02	; 2
     a5a:	80 83       	st	Z, r24
     a5c:	08 95       	ret

00000a5e <WaveInit>:
/**
 * \brief Initialize the waves
 * \param Null
 * \retval Null
 */
void WaveInit(void) {
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
    //  set the threshold frequency
    threshold_freq_int = 174;
     a6a:	8e ea       	ldi	r24, 0xAE	; 174
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <threshold_freq_int+0x1>
     a72:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <threshold_freq_int>
    threshold_freq_float = 174.5;
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e8       	ldi	r25, 0x80	; 128
     a7a:	ae e2       	ldi	r26, 0x2E	; 46
     a7c:	b3 e4       	ldi	r27, 0x43	; 67
     a7e:	80 93 87 08 	sts	0x0887, r24	; 0x800887 <threshold_freq_float>
     a82:	90 93 88 08 	sts	0x0888, r25	; 0x800888 <threshold_freq_float+0x1>
     a86:	a0 93 89 08 	sts	0x0889, r26	; 0x800889 <threshold_freq_float+0x2>
     a8a:	b0 93 8a 08 	sts	0x088A, r27	; 0x80088a <threshold_freq_float+0x3>
    //  set the output ports for wave 1;
    DDRD |= (1 << DDD2| 1 << DDD3 | 1 << DDD4 | 1 << DDD5
     a8e:	8a b1       	in	r24, 0x0a	; 10
     a90:	8c 6f       	ori	r24, 0xFC	; 252
     a92:	8a b9       	out	0x0a, r24	; 10
    | 1 << DDD6 | 1 << DDD7);
    DDRC |= (1  <<  DDC0 | 1  <<  DDC1 | 1 <<  DDC2 | 1 <<  DDC3);
     a94:	87 b1       	in	r24, 0x07	; 7
     a96:	8f 60       	ori	r24, 0x0F	; 15
     a98:	87 b9       	out	0x07, r24	; 7

    DDRB |= (1 << DDB0 |1  <<  DDB1 | 1 << DDB2 | 1 << DDB3
     a9a:	84 b1       	in	r24, 0x04	; 4
     a9c:	8f 63       	ori	r24, 0x3F	; 63
     a9e:	84 b9       	out	0x04, r24	; 4
    | 1 << DDB4 | 1 << DDB5);



    //  populate wave 1 lookup table
    PopulateWaveTable(waveOne.amplitude, waveOne.offset, waveOne.frequency,
     aa0:	e0 e1       	ldi	r30, 0x10	; 16
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	e2 84       	ldd	r14, Z+10	; 0x0a
     aa6:	f3 84       	ldd	r15, Z+11	; 0x0b
     aa8:	00 85       	ldd	r16, Z+8	; 0x08
     aaa:	11 85       	ldd	r17, Z+9	; 0x09
     aac:	24 81       	ldd	r18, Z+4	; 0x04
     aae:	35 81       	ldd	r19, Z+5	; 0x05
     ab0:	46 81       	ldd	r20, Z+6	; 0x06
     ab2:	57 81       	ldd	r21, Z+7	; 0x07
     ab4:	60 81       	ld	r22, Z
     ab6:	71 81       	ldd	r23, Z+1	; 0x01
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	cc 24       	eor	r12, r12
     abe:	c3 94       	inc	r12
     ac0:	d1 2c       	mov	r13, r1
     ac2:	a3 db       	rcall	.-2234   	; 0x20a <PopulateWaveTable>
    waveOne.wave_type, 1);

    //  populate wave 2 lookup table
    PopulateWaveTable(waveTwo.amplitude, waveTwo.offset, waveTwo.frequency,
     ac4:	e4 e0       	ldi	r30, 0x04	; 4
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	e2 84       	ldd	r14, Z+10	; 0x0a
     aca:	f3 84       	ldd	r15, Z+11	; 0x0b
     acc:	00 85       	ldd	r16, Z+8	; 0x08
     ace:	11 85       	ldd	r17, Z+9	; 0x09
     ad0:	24 81       	ldd	r18, Z+4	; 0x04
     ad2:	35 81       	ldd	r19, Z+5	; 0x05
     ad4:	46 81       	ldd	r20, Z+6	; 0x06
     ad6:	57 81       	ldd	r21, Z+7	; 0x07
     ad8:	60 81       	ld	r22, Z
     ada:	71 81       	ldd	r23, Z+1	; 0x01
     adc:	82 81       	ldd	r24, Z+2	; 0x02
     ade:	93 81       	ldd	r25, Z+3	; 0x03
     ae0:	68 94       	set
     ae2:	cc 24       	eor	r12, r12
     ae4:	c1 f8       	bld	r12, 1
     ae6:	d1 2c       	mov	r13, r1
     ae8:	90 db       	rcall	.-2272   	; 0x20a <PopulateWaveTable>
    waveTwo.wave_type, 2);
}
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	08 95       	ret

00000af8 <ClearReceiveBuffer>:
/**
 * \brief Clears the recieve buffer
 * \param Null
 * \retval Null
 */
void ClearReceiveBuffer(void) {
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ae e2       	ldi	r26, 0x2E	; 46
     afe:	b6 e0       	ldi	r27, 0x06	; 6
        for (int cnt = 0; cnt < strlen(recieved_string); cnt++) {
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	ed 01       	movw	r28, r26
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <ClearReceiveBuffer+0x14>
            //  clear receive buffer
            recieved_string[cnt] = 0;
     b08:	1d 92       	st	X+, r1
 * \brief Clears the recieve buffer
 * \param Null
 * \retval Null
 */
void ClearReceiveBuffer(void) {
        for (int cnt = 0; cnt < strlen(recieved_string); cnt++) {
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	fe 01       	movw	r30, r28
     b0e:	01 90       	ld	r0, Z+
     b10:	00 20       	and	r0, r0
     b12:	e9 f7       	brne	.-6      	; 0xb0e <ClearReceiveBuffer+0x16>
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	ee 52       	subi	r30, 0x2E	; 46
     b18:	f6 40       	sbci	r31, 0x06	; 6
     b1a:	8e 17       	cp	r24, r30
     b1c:	9f 07       	cpc	r25, r31
     b1e:	a0 f3       	brcs	.-24     	; 0xb08 <ClearReceiveBuffer+0x10>
            //  clear receive buffer
            recieved_string[cnt] = 0;
        }
        recieved_string_index = 0;
     b20:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <recieved_string_index+0x1>
     b24:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <recieved_string_index>
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <SendReply>:
/**
 * \brief Sends ack or err
 * \param Null
 * \retval Null
 */
void SendReply(void) {
     b2e:	cf 92       	push	r12
     b30:	df 92       	push	r13
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
    if (format_error == 1) {  //  send err and clear buffer
     b3e:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <format_error>
     b42:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <format_error+0x1>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	09 f0       	breq	.+2      	; 0xb4c <SendReply+0x1e>
     b4a:	42 c0       	rjmp	.+132    	; 0xbd0 <SendReply+0xa2>
        format_error = 0;
     b4c:	10 92 2b 06 	sts	0x062B, r1	; 0x80062b <format_error+0x1>
     b50:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <format_error>
     b54:	ac e1       	ldi	r26, 0x1C	; 28
     b56:	b6 e0       	ldi	r27, 0x06	; 6
     b58:	60 e2       	ldi	r22, 0x20	; 32
     b5a:	76 e0       	ldi	r23, 0x06	; 6
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     b5c:	e4 e9       	ldi	r30, 0x94	; 148
     b5e:	f8 e0       	ldi	r31, 0x08	; 8
static inline void UartPutChar(uint8_t data) {
    //  Disable interrupts to get exclusive access to ring_buffer_out.
    cli();
    if (ring_buffer_is_empty(&ring_buffer_out)) {
        //  First data in buffer, enable data ready interrupt
        UCSR0B |=  (1  <<  UDRIE0);
     b60:	41 ec       	ldi	r20, 0xC1	; 193
     b62:	50 e0       	ldi	r21, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     b64:	f1 2c       	mov	r15, r1
 */
void SendReply(void) {
    if (format_error == 1) {  //  send err and clear buffer
        format_error = 0;
        for (int cnt = 0; cnt < strlen(err); cnt++) {  //  send "ERR\n" back
            UartPutChar(err[cnt]);
     b66:	ed 90       	ld	r14, X+
 * \param data the data to add to the UART buffer and send
 *    Adapted from example AVR code (AFS license)
 */
static inline void UartPutChar(uint8_t data) {
    //  Disable interrupts to get exclusive access to ring_buffer_out.
    cli();
     b68:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     b6a:	91 81       	ldd	r25, Z+1	; 0x01
     b6c:	80 81       	ld	r24, Z
    if (ring_buffer_is_empty(&ring_buffer_out)) {
     b6e:	98 13       	cpse	r25, r24
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <SendReply+0x4c>
        //  First data in buffer, enable data ready interrupt
        UCSR0B |=  (1  <<  UDRIE0);
     b72:	ea 01       	movw	r28, r20
     b74:	88 81       	ld	r24, Y
     b76:	80 62       	ori	r24, 0x20	; 32
     b78:	88 83       	st	Y, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     b7c:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     b7e:	08 2f       	mov	r16, r24
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	22 81       	ldd	r18, Z+2	; 0x02
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	21 50       	subi	r18, 0x01	; 1
     b88:	31 09       	sbc	r19, r1
     b8a:	02 17       	cp	r16, r18
     b8c:	13 07       	cpc	r17, r19
     b8e:	11 f0       	breq	.+4      	; 0xb94 <SendReply+0x66>
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <SendReply+0x68>
     b94:	8f 2d       	mov	r24, r15
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
     b96:	98 13       	cpse	r25, r24
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <SendReply+0x6e>
     b9a:	ff cf       	rjmp	.-2      	; 0xb9a <SendReply+0x6c>
	ring->buffer[ring->write_offset] = data;
     b9c:	20 81       	ld	r18, Z
     b9e:	83 81       	ldd	r24, Z+3	; 0x03
     ba0:	94 81       	ldd	r25, Z+4	; 0x04
     ba2:	82 0f       	add	r24, r18
     ba4:	91 1d       	adc	r25, r1
     ba6:	ec 01       	movw	r28, r24
     ba8:	e8 82       	st	Y, r14
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     baa:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     bac:	08 2f       	mov	r16, r24
     bae:	10 e0       	ldi	r17, 0x00	; 0
     bb0:	22 81       	ldd	r18, Z+2	; 0x02
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	21 50       	subi	r18, 0x01	; 1
     bb6:	31 09       	sbc	r19, r1
     bb8:	02 17       	cp	r16, r18
     bba:	13 07       	cpc	r17, r19
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <SendReply+0x94>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <SendReply+0x96>
     bc2:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     bc4:	80 83       	st	Z, r24
    }
    //  Put data in buffer
    ring_buffer_put(&ring_buffer_out, data);

    //  Re-enable interrupts
    sei();
     bc6:	78 94       	sei
 * \retval Null
 */
void SendReply(void) {
    if (format_error == 1) {  //  send err and clear buffer
        format_error = 0;
        for (int cnt = 0; cnt < strlen(err); cnt++) {  //  send "ERR\n" back
     bc8:	6a 17       	cp	r22, r26
     bca:	7b 07       	cpc	r23, r27
            UartPutChar(err[cnt]);
        }
        ClearReceiveBuffer();
     bcc:	61 f6       	brne	.-104    	; 0xb66 <SendReply+0x38>
    }

    if (send_ack == 1) {
     bce:	94 df       	rcall	.-216    	; 0xaf8 <ClearReceiveBuffer>
     bd0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <send_ack>
     bd4:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <send_ack+0x1>
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	09 f0       	breq	.+2      	; 0xbde <SendReply+0xb0>
        //  send ack and clear buffer, update lookup tables

        //  for high frequency waves, increase the sampling rate
        if (waveOne.frequency >= 6000 || waveTwo.frequency >= 6000) {
     bdc:	77 c0       	rjmp	.+238    	; 0xccc <SendReply+0x19e>
     bde:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <waveOne+0x8>
     be2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <waveOne+0x9>
     be6:	80 37       	cpi	r24, 0x70	; 112
     be8:	97 41       	sbci	r25, 0x17	; 23
     bea:	3c f4       	brge	.+14     	; 0xbfa <SendReply+0xcc>
     bec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <waveTwo+0x8>
     bf0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <waveTwo+0x9>
     bf4:	80 37       	cpi	r24, 0x70	; 112
     bf6:	97 41       	sbci	r25, 0x17	; 23
            OCR0A = 39;
     bf8:	cc f0       	brlt	.+50     	; 0xc2c <SendReply+0xfe>
     bfa:	87 e2       	ldi	r24, 0x27	; 39
            threshold_freq_int = 196;
     bfc:	87 bd       	out	0x27, r24	; 39
     bfe:	84 ec       	ldi	r24, 0xC4	; 196
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <threshold_freq_int+0x1>
     c06:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <threshold_freq_int>
            threshold_freq_float = 196.0;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a4 e4       	ldi	r26, 0x44	; 68
     c10:	b3 e4       	ldi	r27, 0x43	; 67
     c12:	80 93 87 08 	sts	0x0887, r24	; 0x800887 <threshold_freq_float>
     c16:	90 93 88 08 	sts	0x0888, r25	; 0x800888 <threshold_freq_float+0x1>
     c1a:	a0 93 89 08 	sts	0x0889, r26	; 0x800889 <threshold_freq_float+0x2>
     c1e:	b0 93 8a 08 	sts	0x088A, r27	; 0x80088a <threshold_freq_float+0x3>
            temp_display = 0;
     c22:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     c26:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
            } else {
            OCR0A = 44;
     c2a:	7c c0       	rjmp	.+248    	; 0xd24 <SendReply+0x1f6>
     c2c:	8c e2       	ldi	r24, 0x2C	; 44
            threshold_freq_int = 174;
     c2e:	87 bd       	out	0x27, r24	; 39
     c30:	8e ea       	ldi	r24, 0xAE	; 174
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <threshold_freq_int+0x1>
     c38:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <threshold_freq_int>
            threshold_freq_float = 174.5;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e8       	ldi	r25, 0x80	; 128
     c40:	ae e2       	ldi	r26, 0x2E	; 46
     c42:	b3 e4       	ldi	r27, 0x43	; 67
     c44:	80 93 87 08 	sts	0x0887, r24	; 0x800887 <threshold_freq_float>
     c48:	90 93 88 08 	sts	0x0888, r25	; 0x800888 <threshold_freq_float+0x1>
     c4c:	a0 93 89 08 	sts	0x0889, r26	; 0x800889 <threshold_freq_float+0x2>
     c50:	b0 93 8a 08 	sts	0x088A, r27	; 0x80088a <threshold_freq_float+0x3>
            temp_display = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        PopulateWaveTable(waveTwo.amplitude, waveTwo.offset,
        waveTwo.frequency, waveTwo.wave_type, 2);

        send_ack = 0;
        for (int cnt = 0; cnt < strlen(ack); cnt++) {  //  send "ACK\n" back
            UartPutChar(ack[cnt]);
     c60:	61 c0       	rjmp	.+194    	; 0xd24 <SendReply+0x1f6>
 * \param data the data to add to the UART buffer and send
 *    Adapted from example AVR code (AFS license)
 */
static inline void UartPutChar(uint8_t data) {
    //  Disable interrupts to get exclusive access to ring_buffer_out.
    cli();
     c62:	ed 90       	ld	r14, X+
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     c64:	f8 94       	cli
     c66:	91 81       	ldd	r25, Z+1	; 0x01
    if (ring_buffer_is_empty(&ring_buffer_out)) {
     c68:	80 81       	ld	r24, Z
     c6a:	98 13       	cpse	r25, r24
        //  First data in buffer, enable data ready interrupt
        UCSR0B |=  (1  <<  UDRIE0);
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <SendReply+0x148>
     c6e:	ea 01       	movw	r28, r20
     c70:	88 81       	ld	r24, Y
     c72:	80 62       	ori	r24, 0x20	; 32
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
     c74:	88 83       	st	Y, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     c76:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     c78:	80 81       	ld	r24, Z
     c7a:	08 2f       	mov	r16, r24
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	22 81       	ldd	r18, Z+2	; 0x02
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	21 50       	subi	r18, 0x01	; 1
     c84:	31 09       	sbc	r19, r1
     c86:	02 17       	cp	r16, r18
     c88:	13 07       	cpc	r17, r19
     c8a:	11 f0       	breq	.+4      	; 0xc90 <SendReply+0x162>
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <SendReply+0x164>
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
     c90:	8f 2d       	mov	r24, r15
     c92:	98 13       	cpse	r25, r24
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <SendReply+0x16a>
	ring->buffer[ring->write_offset] = data;
     c96:	ff cf       	rjmp	.-2      	; 0xc96 <SendReply+0x168>
     c98:	20 81       	ld	r18, Z
     c9a:	83 81       	ldd	r24, Z+3	; 0x03
     c9c:	94 81       	ldd	r25, Z+4	; 0x04
     c9e:	82 0f       	add	r24, r18
     ca0:	91 1d       	adc	r25, r1
     ca2:	ec 01       	movw	r28, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     ca4:	e8 82       	st	Y, r14
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     ca6:	80 81       	ld	r24, Z
     ca8:	08 2f       	mov	r16, r24
     caa:	10 e0       	ldi	r17, 0x00	; 0
     cac:	22 81       	ldd	r18, Z+2	; 0x02
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	21 50       	subi	r18, 0x01	; 1
     cb2:	31 09       	sbc	r19, r1
     cb4:	02 17       	cp	r16, r18
     cb6:	13 07       	cpc	r17, r19
     cb8:	11 f0       	breq	.+4      	; 0xcbe <SendReply+0x190>
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <SendReply+0x192>
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     cbe:	8f 2d       	mov	r24, r15
    }
    //  Put data in buffer
    ring_buffer_put(&ring_buffer_out, data);

    //  Re-enable interrupts
    sei();
     cc0:	80 83       	st	Z, r24

        PopulateWaveTable(waveTwo.amplitude, waveTwo.offset,
        waveTwo.frequency, waveTwo.wave_type, 2);

        send_ack = 0;
        for (int cnt = 0; cnt < strlen(ack); cnt++) {  //  send "ACK\n" back
     cc2:	78 94       	sei
     cc4:	6a 17       	cp	r22, r26
            UartPutChar(ack[cnt]);
        }
        ClearReceiveBuffer();
     cc6:	7b 07       	cpc	r23, r27
     cc8:	61 f6       	brne	.-104    	; 0xc62 <SendReply+0x134>
    }

    if (continuee == 1) {
     cca:	16 df       	rcall	.-468    	; 0xaf8 <ClearReceiveBuffer>
     ccc:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <__data_end>
     cd0:	90 91 27 06 	lds	r25, 0x0627	; 0x800627 <__data_end+0x1>
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	09 f0       	breq	.+2      	; 0xcda <SendReply+0x1ac>
     cd8:	58 c0       	rjmp	.+176    	; 0xd8a <SendReply+0x25c>
     cda:	ae e2       	ldi	r26, 0x2E	; 46
     cdc:	b6 e0       	ldi	r27, 0x06	; 6
     cde:	80 e0       	ldi	r24, 0x00	; 0
        //  restart interrupts
        for (int cnt = 0; cnt < strlen(recieved_string); cnt++) {
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	ed 01       	movw	r28, r26
            // clear buffer
            recieved_string[cnt] = 0;
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <SendReply+0x1bc>
        ClearReceiveBuffer();
    }

    if (continuee == 1) {
        //  restart interrupts
        for (int cnt = 0; cnt < strlen(recieved_string); cnt++) {
     ce6:	1d 92       	st	X+, r1
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	fe 01       	movw	r30, r28
     cec:	01 90       	ld	r0, Z+
     cee:	00 20       	and	r0, r0
     cf0:	e9 f7       	brne	.-6      	; 0xcec <SendReply+0x1be>
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	ee 52       	subi	r30, 0x2E	; 46
     cf6:	f6 40       	sbci	r31, 0x06	; 6
     cf8:	8e 17       	cp	r24, r30
     cfa:	9f 07       	cpc	r25, r31
            // clear buffer
            recieved_string[cnt] = 0;
        }
        TIMSK0 |= (1 << OCIE0A);
     cfc:	a0 f3       	brcs	.-24     	; 0xce6 <SendReply+0x1b8>
     cfe:	ee e6       	ldi	r30, 0x6E	; 110
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	82 60       	ori	r24, 0x02	; 2
        TIMSK1 |= (1 << OCIE1A);
     d06:	80 83       	st	Z, r24
     d08:	ef e6       	ldi	r30, 0x6F	; 111
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 60       	ori	r24, 0x02	; 2
        recieved_string_index = 0;
     d10:	80 83       	st	Z, r24
     d12:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <recieved_string_index+0x1>
     d16:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <recieved_string_index>
        continuee = 0;
     d1a:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <__data_end+0x1>
     d1e:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <__data_end>
            temp_display = 1;
        }


        // populate the new waves
        PopulateWaveTable(waveOne.amplitude, waveOne.offset,
     d22:	33 c0       	rjmp	.+102    	; 0xd8a <SendReply+0x25c>
     d24:	e0 e1       	ldi	r30, 0x10	; 16
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	e2 84       	ldd	r14, Z+10	; 0x0a
     d2a:	f3 84       	ldd	r15, Z+11	; 0x0b
     d2c:	00 85       	ldd	r16, Z+8	; 0x08
     d2e:	11 85       	ldd	r17, Z+9	; 0x09
     d30:	24 81       	ldd	r18, Z+4	; 0x04
     d32:	35 81       	ldd	r19, Z+5	; 0x05
     d34:	46 81       	ldd	r20, Z+6	; 0x06
     d36:	57 81       	ldd	r21, Z+7	; 0x07
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	cc 24       	eor	r12, r12
     d42:	c3 94       	inc	r12
     d44:	d1 2c       	mov	r13, r1
        waveOne.frequency, waveOne.wave_type, 1);

        PopulateWaveTable(waveTwo.amplitude, waveTwo.offset,
     d46:	61 da       	rcall	.-2878   	; 0x20a <PopulateWaveTable>
     d48:	e4 e0       	ldi	r30, 0x04	; 4
     d4a:	f1 e0       	ldi	r31, 0x01	; 1
     d4c:	e2 84       	ldd	r14, Z+10	; 0x0a
     d4e:	f3 84       	ldd	r15, Z+11	; 0x0b
     d50:	00 85       	ldd	r16, Z+8	; 0x08
     d52:	11 85       	ldd	r17, Z+9	; 0x09
     d54:	24 81       	ldd	r18, Z+4	; 0x04
     d56:	35 81       	ldd	r19, Z+5	; 0x05
     d58:	46 81       	ldd	r20, Z+6	; 0x06
     d5a:	57 81       	ldd	r21, Z+7	; 0x07
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	68 94       	set
     d66:	cc 24       	eor	r12, r12
     d68:	c1 f8       	bld	r12, 1
     d6a:	d1 2c       	mov	r13, r1
        waveTwo.frequency, waveTwo.wave_type, 2);

        send_ack = 0;
     d6c:	4e da       	rcall	.-2916   	; 0x20a <PopulateWaveTable>
     d6e:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <send_ack+0x1>
     d72:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <send_ack>
     d76:	a1 e2       	ldi	r26, 0x21	; 33
     d78:	b6 e0       	ldi	r27, 0x06	; 6
     d7a:	65 e2       	ldi	r22, 0x25	; 37
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     d7c:	76 e0       	ldi	r23, 0x06	; 6
     d7e:	e4 e9       	ldi	r30, 0x94	; 148
static inline void UartPutChar(uint8_t data) {
    //  Disable interrupts to get exclusive access to ring_buffer_out.
    cli();
    if (ring_buffer_is_empty(&ring_buffer_out)) {
        //  First data in buffer, enable data ready interrupt
        UCSR0B |=  (1  <<  UDRIE0);
     d80:	f8 e0       	ldi	r31, 0x08	; 8
     d82:	41 ec       	ldi	r20, 0xC1	; 193
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	f1 2c       	mov	r15, r1
        TIMSK0 |= (1 << OCIE0A);
        TIMSK1 |= (1 << OCIE1A);
        recieved_string_index = 0;
        continuee = 0;
    }
}
     d88:	6c cf       	rjmp	.-296    	; 0xc62 <SendReply+0x134>
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	08 95       	ret

00000d9c <main>:
 /**
 * \brief Main
 * \param Null
 * \retval Null
 */
int main(void) {
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	a2 97       	sbiw	r28, 0x22	; 34
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
    uint8_t cnt;

    //  initialize uart
    cli();
     db0:	f8 94       	cli
 * Adapted from example AVR code (AFS license)
 */
static void UartInit(void) {
#if defined UBRR0H
    //  get the values from the setbaud tool
    UBRR0H = UBRRH_VALUE;
     db2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = UBRRL_VALUE;
     db6:	87 e6       	ldi	r24, 0x67	; 103
     db8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#if USE_2X
    UCSR0A |= (1  <<  U2X0);
#endif

    //  enable RX and TX and set interrupts on rx complete
    UCSR0B = (1  <<  RXEN0) | (1  <<  TXEN0) | (1  <<  RXCIE0);
     dbc:	88 e9       	ldi	r24, 0x98	; 152
     dbe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    //  8-bit, 1 stop bit, no parity, asynchronous UART
    UCSR0C = (1  <<  UCSZ01) | (1  <<  UCSZ00) | (0  <<  USBS0) |
     dc2:	86 e0       	ldi	r24, 0x06	; 6
     dc4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     dc8:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     dca:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     dcc:	84 e1       	ldi	r24, 0x14	; 20
     dce:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     dd0:	2f e5       	ldi	r18, 0x5F	; 95
     dd2:	38 e0       	ldi	r19, 0x08	; 8
     dd4:	39 8f       	std	Y+25, r19	; 0x19
     dd6:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
     dd8:	95 e0       	ldi	r25, 0x05	; 5
     dda:	fe 01       	movw	r30, r28
     ddc:	75 96       	adiw	r30, 0x15	; 21
     dde:	de 01       	movw	r26, r28
     de0:	50 96       	adiw	r26, 0x10	; 16
     de2:	01 90       	ld	r0, Z+
     de4:	0d 92       	st	X+, r0
     de6:	9a 95       	dec	r25
     de8:	e1 f7       	brne	.-8      	; 0xde2 <main+0x46>
     dea:	95 e0       	ldi	r25, 0x05	; 5
     dec:	fe 01       	movw	r30, r28
     dee:	70 96       	adiw	r30, 0x10	; 16
     df0:	de 01       	movw	r26, r28
     df2:	1b 96       	adiw	r26, 0x0b	; 11
     df4:	01 90       	ld	r0, Z+
     df6:	0d 92       	st	X+, r0
     df8:	9a 95       	dec	r25
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <main+0x58>
            (0  <<  UPM01) | (0  <<  UPM00) | (0  <<  UMSEL01) |
            (0  <<  UMSEL00);

    //  initialize the in and out buffer for the UART
    ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
     dfc:	95 e0       	ldi	r25, 0x05	; 5
     dfe:	fe 01       	movw	r30, r28
     e00:	3b 96       	adiw	r30, 0x0b	; 11
     e02:	a4 e9       	ldi	r26, 0x94	; 148
     e04:	b8 e0       	ldi	r27, 0x08	; 8
     e06:	01 90       	ld	r0, Z+
     e08:	0d 92       	st	X+, r0
     e0a:	9a 95       	dec	r25
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <main+0x6a>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     e0e:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     e10:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     e12:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     e14:	83 e7       	ldi	r24, 0x73	; 115
     e16:	98 e0       	ldi	r25, 0x08	; 8
     e18:	99 8f       	std	Y+25, r25	; 0x19
     e1a:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
     e1c:	85 e0       	ldi	r24, 0x05	; 5
     e1e:	fe 01       	movw	r30, r28
     e20:	75 96       	adiw	r30, 0x15	; 21
     e22:	de 01       	movw	r26, r28
     e24:	16 96       	adiw	r26, 0x06	; 6
     e26:	01 90       	ld	r0, Z+
     e28:	0d 92       	st	X+, r0
     e2a:	8a 95       	dec	r24
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <main+0x8a>
     e2e:	85 e0       	ldi	r24, 0x05	; 5
     e30:	fe 01       	movw	r30, r28
     e32:	36 96       	adiw	r30, 0x06	; 6
     e34:	de 01       	movw	r26, r28
     e36:	11 96       	adiw	r26, 0x01	; 1
     e38:	01 90       	ld	r0, Z+
     e3a:	0d 92       	st	X+, r0
     e3c:	8a 95       	dec	r24
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <main+0x9c>
    ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
     e40:	85 e0       	ldi	r24, 0x05	; 5
     e42:	fe 01       	movw	r30, r28
     e44:	31 96       	adiw	r30, 0x01	; 1
     e46:	ac e8       	ldi	r26, 0x8C	; 140
     e48:	b8 e0       	ldi	r27, 0x08	; 8
     e4a:	01 90       	ld	r0, Z+
     e4c:	0d 92       	st	X+, r0
     e4e:	8a 95       	dec	r24
    uint8_t cnt;

    //  initialize uart
    cli();
    UartInit();
    WaveInit();
     e50:	e1 f7       	brne	.-8      	; 0xe4a <main+0xae>
     e52:	05 de       	rcall	.-1014   	; 0xa5e <WaveInit>
     e54:	e1 dd       	rcall	.-1086   	; 0xa18 <InterruptInit>
     e56:	da dd       	rcall	.-1100   	; 0xa0c <I2cInit>
     e58:	78 94       	sei
     e5a:	0f 2e       	mov	r0, r31
     e5c:	fc e8       	ldi	r31, 0x8C	; 140
     e5e:	ef 2e       	mov	r14, r31
     e60:	f8 e0       	ldi	r31, 0x08	; 8
     e62:	ff 2e       	mov	r15, r31
     e64:	f0 2d       	mov	r31, r0
     e66:	ce 01       	movw	r24, r28
     e68:	45 96       	adiw	r24, 0x15	; 21
     e6a:	98 a3       	std	Y+32, r25	; 0x20
     e6c:	8f 8f       	std	Y+31, r24	; 0x1f
     e6e:	0f 2e       	mov	r0, r31
     e70:	fe e2       	ldi	r31, 0x2E	; 46
     e72:	2f 2e       	mov	r2, r31
     e74:	f6 e0       	ldi	r31, 0x06	; 6
     e76:	3f 2e       	mov	r3, r31
     e78:	f0 2d       	mov	r31, r0
     e7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e7c:	99 a3       	std	Y+33, r25	; 0x21
     e7e:	a8 a1       	ldd	r26, Y+32	; 0x20
     e80:	aa a3       	std	Y+34, r26	; 0x22
     e82:	55 de       	rcall	.-854    	; 0xb2e <SendReply>
     e84:	01 e0       	ldi	r16, 0x01	; 1
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	0f 2e       	mov	r0, r31
     e8a:	f4 e0       	ldi	r31, 0x04	; 4
     e8c:	cf 2e       	mov	r12, r31
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	df 2e       	mov	r13, r31
     e92:	f0 2d       	mov	r31, r0
     e94:	6a c1       	rjmp	.+724    	; 0x116a <main+0x3ce>
     e96:	ee e6       	ldi	r30, 0x6E	; 110
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8d 7f       	andi	r24, 0xFD	; 253
     e9e:	80 83       	st	Z, r24
     ea0:	af e6       	ldi	r26, 0x6F	; 111
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	8c 91       	ld	r24, X
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
     ea8:	8c 93       	st	X, r24
     eaa:	f7 01       	movw	r30, r14
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	80 81       	ld	r24, Z
     eb0:	98 13       	cpse	r25, r24
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <main+0x11a>
     eb4:	ff cf       	rjmp	.-2      	; 0xeb4 <main+0x118>
     eb6:	d7 01       	movw	r26, r14
     eb8:	81 81       	ldd	r24, Z+1	; 0x01
     eba:	03 80       	ldd	r0, Z+3	; 0x03
     ebc:	f4 81       	ldd	r31, Z+4	; 0x04
     ebe:	e0 2d       	mov	r30, r0
     ec0:	e8 0f       	add	r30, r24
     ec2:	f1 1d       	adc	r31, r1
     ec4:	30 81       	ld	r19, Z
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	2c 91       	ld	r18, X
     eca:	11 97       	sbiw	r26, 0x01	; 1
     ecc:	42 2f       	mov	r20, r18
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	12 96       	adiw	r26, 0x02	; 2
     ed2:	8c 91       	ld	r24, X
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	48 17       	cp	r20, r24
     eda:	59 07       	cpc	r21, r25
     edc:	11 f0       	breq	.+4      	; 0xee2 <main+0x146>
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <main+0x148>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	f7 01       	movw	r30, r14
     ee6:	21 83       	std	Z+1, r18	; 0x01
     ee8:	30 93 5c 08 	sts	0x085C, r19	; 0x80085c <recieved_byte>
     eec:	33 23       	and	r19, r19
     eee:	09 f4       	brne	.+2      	; 0xef2 <main+0x156>
     ef0:	3c c1       	rjmp	.+632    	; 0x116a <main+0x3ce>
     ef2:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <recieved_string_index>
     ef6:	90 91 2d 06 	lds	r25, 0x062D	; 0x80062d <recieved_string_index+0x1>
     efa:	fc 01       	movw	r30, r24
     efc:	e2 5d       	subi	r30, 0xD2	; 210
     efe:	f9 4f       	sbci	r31, 0xF9	; 249
     f00:	30 83       	st	Z, r19
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	90 93 2d 06 	sts	0x062D, r25	; 0x80062d <recieved_string_index+0x1>
     f08:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <recieved_string_index>
     f0c:	31 32       	cpi	r19, 0x21	; 33
     f0e:	09 f0       	breq	.+2      	; 0xf12 <main+0x176>
     f10:	26 c1       	rjmp	.+588    	; 0x115e <main+0x3c2>
     f12:	af 8d       	ldd	r26, Y+31	; 0x1f
     f14:	b8 a1       	ldd	r27, Y+32	; 0x20
     f16:	e6 e0       	ldi	r30, 0x06	; 6
     f18:	1d 92       	st	X+, r1
     f1a:	ea 95       	dec	r30
     f1c:	e9 f7       	brne	.-6      	; 0xf18 <main+0x17c>
     f1e:	d1 01       	movw	r26, r2
     f20:	14 96       	adiw	r26, 0x04	; 4
     f22:	8c 91       	ld	r24, X
     f24:	14 97       	sbiw	r26, 0x04	; 4
     f26:	8d 8b       	std	Y+21, r24	; 0x15
     f28:	15 96       	adiw	r26, 0x05	; 5
     f2a:	8c 91       	ld	r24, X
     f2c:	15 97       	sbiw	r26, 0x05	; 5
     f2e:	8e 8b       	std	Y+22, r24	; 0x16
     f30:	16 96       	adiw	r26, 0x06	; 6
     f32:	8c 91       	ld	r24, X
     f34:	16 97       	sbiw	r26, 0x06	; 6
     f36:	8f 8b       	std	Y+23, r24	; 0x17
     f38:	17 96       	adiw	r26, 0x07	; 7
     f3a:	8c 91       	ld	r24, X
     f3c:	17 97       	sbiw	r26, 0x07	; 7
     f3e:	88 8f       	std	Y+24, r24	; 0x18
     f40:	18 96       	adiw	r26, 0x08	; 8
     f42:	8c 91       	ld	r24, X
     f44:	89 8f       	std	Y+25, r24	; 0x19
     f46:	4a e0       	ldi	r20, 0x0A	; 10
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	be 01       	movw	r22, r28
     f4c:	63 5e       	subi	r22, 0xE3	; 227
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	89 a1       	ldd	r24, Y+33	; 0x21
     f52:	9a a1       	ldd	r25, Y+34	; 0x22
     f54:	9b d6       	rcall	.+3382   	; 0x1c8c <strtol>
     f56:	2b 01       	movw	r4, r22
     f58:	3c 01       	movw	r6, r24
     f5a:	be 01       	movw	r22, r28
     f5c:	65 5e       	subi	r22, 0xE5	; 229
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	89 a1       	ldd	r24, Y+33	; 0x21
     f62:	9a a1       	ldd	r25, Y+34	; 0x22
     f64:	50 d5       	rcall	.+2720   	; 0x1a06 <strtod>
     f66:	4b 01       	movw	r8, r22
     f68:	5c 01       	movw	r10, r24
     f6a:	f1 01       	movw	r30, r2
     f6c:	80 81       	ld	r24, Z
     f6e:	81 34       	cpi	r24, 0x41	; 65
     f70:	c9 f5       	brne	.+114    	; 0xfe4 <main+0x248>
     f72:	81 81       	ldd	r24, Z+1	; 0x01
     f74:	8d 34       	cpi	r24, 0x4D	; 77
     f76:	09 f0       	breq	.+2      	; 0xf7a <main+0x1de>
     f78:	ed c0       	rjmp	.+474    	; 0x1154 <main+0x3b8>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	c5 01       	movw	r24, r10
     f82:	b4 01       	movw	r22, r8
     f84:	b2 d4       	rcall	.+2404   	; 0x18ea <__gesf2>
     f86:	88 23       	and	r24, r24
     f88:	1c f1       	brlt	.+70     	; 0xfd0 <main+0x234>
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	c5 01       	movw	r24, r10
     f94:	b4 01       	movw	r22, r8
     f96:	5a d3       	rcall	.+1716   	; 0x164c <__cmpsf2>
     f98:	18 16       	cp	r1, r24
     f9a:	d4 f0       	brlt	.+52     	; 0xfd0 <main+0x234>
     f9c:	d1 01       	movw	r26, r2
     f9e:	12 96       	adiw	r26, 0x02	; 2
     fa0:	8c 91       	ld	r24, X
     fa2:	81 33       	cpi	r24, 0x31	; 49
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <main+0x218>
     fa6:	e0 e1       	ldi	r30, 0x10	; 16
     fa8:	f1 e0       	ldi	r31, 0x01	; 1
     faa:	80 82       	st	Z, r8
     fac:	91 82       	std	Z+1, r9	; 0x01
     fae:	a2 82       	std	Z+2, r10	; 0x02
     fb0:	b3 82       	std	Z+3, r11	; 0x03
     fb2:	13 c0       	rjmp	.+38     	; 0xfda <main+0x23e>
     fb4:	82 33       	cpi	r24, 0x32	; 50
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <main+0x22a>
     fb8:	d6 01       	movw	r26, r12
     fba:	8d 92       	st	X+, r8
     fbc:	9d 92       	st	X+, r9
     fbe:	ad 92       	st	X+, r10
     fc0:	bc 92       	st	X, r11
     fc2:	13 97       	sbiw	r26, 0x03	; 3
     fc4:	0a c0       	rjmp	.+20     	; 0xfda <main+0x23e>
     fc6:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
     fca:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
     fce:	cd c0       	rjmp	.+410    	; 0x116a <main+0x3ce>
     fd0:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
     fd4:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
     fd8:	c8 c0       	rjmp	.+400    	; 0x116a <main+0x3ce>
     fda:	10 93 29 06 	sts	0x0629, r17	; 0x800629 <send_ack+0x1>
     fde:	00 93 28 06 	sts	0x0628, r16	; 0x800628 <send_ack>
     fe2:	c3 c0       	rjmp	.+390    	; 0x116a <main+0x3ce>
     fe4:	8f 34       	cpi	r24, 0x4F	; 79
     fe6:	09 f0       	breq	.+2      	; 0xfea <main+0x24e>
     fe8:	3c c0       	rjmp	.+120    	; 0x1062 <main+0x2c6>
     fea:	f1 01       	movw	r30, r2
     fec:	81 81       	ldd	r24, Z+1	; 0x01
     fee:	86 34       	cpi	r24, 0x46	; 70
     ff0:	09 f0       	breq	.+2      	; 0xff4 <main+0x258>
     ff2:	b0 c0       	rjmp	.+352    	; 0x1154 <main+0x3b8>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 ec       	ldi	r21, 0xC1	; 193
     ffc:	c5 01       	movw	r24, r10
     ffe:	b4 01       	movw	r22, r8
    1000:	74 d4       	rcall	.+2280   	; 0x18ea <__gesf2>
    1002:	88 23       	and	r24, r24
    1004:	24 f1       	brlt	.+72     	; 0x104e <main+0x2b2>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	c5 01       	movw	r24, r10
    1010:	b4 01       	movw	r22, r8
    1012:	1c d3       	rcall	.+1592   	; 0x164c <__cmpsf2>
    1014:	18 16       	cp	r1, r24
    1016:	dc f0       	brlt	.+54     	; 0x104e <main+0x2b2>
    1018:	d1 01       	movw	r26, r2
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	8c 91       	ld	r24, X
    101e:	81 33       	cpi	r24, 0x31	; 49
    1020:	49 f4       	brne	.+18     	; 0x1034 <main+0x298>
    1022:	80 92 14 01 	sts	0x0114, r8	; 0x800114 <waveOne+0x4>
    1026:	90 92 15 01 	sts	0x0115, r9	; 0x800115 <waveOne+0x5>
    102a:	a0 92 16 01 	sts	0x0116, r10	; 0x800116 <waveOne+0x6>
    102e:	b0 92 17 01 	sts	0x0117, r11	; 0x800117 <waveOne+0x7>
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <main+0x2bc>
    1034:	82 33       	cpi	r24, 0x32	; 50
    1036:	31 f4       	brne	.+12     	; 0x1044 <main+0x2a8>
    1038:	f6 01       	movw	r30, r12
    103a:	84 82       	std	Z+4, r8	; 0x04
    103c:	95 82       	std	Z+5, r9	; 0x05
    103e:	a6 82       	std	Z+6, r10	; 0x06
    1040:	b7 82       	std	Z+7, r11	; 0x07
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <main+0x2bc>
    1044:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
    1048:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
    104c:	8e c0       	rjmp	.+284    	; 0x116a <main+0x3ce>
    104e:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
    1052:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
    1056:	89 c0       	rjmp	.+274    	; 0x116a <main+0x3ce>
    1058:	10 93 29 06 	sts	0x0629, r17	; 0x800629 <send_ack+0x1>
    105c:	00 93 28 06 	sts	0x0628, r16	; 0x800628 <send_ack>
    1060:	84 c0       	rjmp	.+264    	; 0x116a <main+0x3ce>
    1062:	86 34       	cpi	r24, 0x46	; 70
    1064:	49 f5       	brne	.+82     	; 0x10b8 <main+0x31c>
    1066:	81 81       	ldd	r24, Z+1	; 0x01
    1068:	82 35       	cpi	r24, 0x52	; 82
    106a:	09 f0       	breq	.+2      	; 0x106e <main+0x2d2>
    106c:	73 c0       	rjmp	.+230    	; 0x1154 <main+0x3b8>
    106e:	c2 01       	movw	r24, r4
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	80 31       	cpi	r24, 0x10	; 16
    1074:	97 42       	sbci	r25, 0x27	; 39
    1076:	b0 f4       	brcc	.+44     	; 0x10a4 <main+0x308>
    1078:	f1 01       	movw	r30, r2
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	81 33       	cpi	r24, 0x31	; 49
    107e:	29 f4       	brne	.+10     	; 0x108a <main+0x2ee>
    1080:	50 92 19 01 	sts	0x0119, r5	; 0x800119 <waveOne+0x9>
    1084:	40 92 18 01 	sts	0x0118, r4	; 0x800118 <waveOne+0x8>
    1088:	12 c0       	rjmp	.+36     	; 0x10ae <main+0x312>
    108a:	82 33       	cpi	r24, 0x32	; 50
    108c:	31 f4       	brne	.+12     	; 0x109a <main+0x2fe>
    108e:	d6 01       	movw	r26, r12
    1090:	19 96       	adiw	r26, 0x09	; 9
    1092:	5c 92       	st	X, r5
    1094:	4e 92       	st	-X, r4
    1096:	18 97       	sbiw	r26, 0x08	; 8
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <main+0x312>
    109a:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
    109e:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
    10a2:	63 c0       	rjmp	.+198    	; 0x116a <main+0x3ce>
    10a4:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
    10a8:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
    10ac:	5e c0       	rjmp	.+188    	; 0x116a <main+0x3ce>
    10ae:	10 93 29 06 	sts	0x0629, r17	; 0x800629 <send_ack+0x1>
    10b2:	00 93 28 06 	sts	0x0628, r16	; 0x800628 <send_ack>
    10b6:	59 c0       	rjmp	.+178    	; 0x116a <main+0x3ce>
    10b8:	87 35       	cpi	r24, 0x57	; 87
    10ba:	41 f5       	brne	.+80     	; 0x110c <main+0x370>
    10bc:	f1 01       	movw	r30, r2
    10be:	81 81       	ldd	r24, Z+1	; 0x01
    10c0:	81 34       	cpi	r24, 0x41	; 65
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <main+0x32a>
    10c4:	47 c0       	rjmp	.+142    	; 0x1154 <main+0x3b8>
    10c6:	c2 01       	movw	r24, r4
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	05 97       	sbiw	r24, 0x05	; 5
    10cc:	a8 f4       	brcc	.+42     	; 0x10f8 <main+0x35c>
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	81 33       	cpi	r24, 0x31	; 49
    10d2:	29 f4       	brne	.+10     	; 0x10de <main+0x342>
    10d4:	50 92 1b 01 	sts	0x011B, r5	; 0x80011b <waveOne+0xb>
    10d8:	40 92 1a 01 	sts	0x011A, r4	; 0x80011a <waveOne+0xa>
    10dc:	12 c0       	rjmp	.+36     	; 0x1102 <main+0x366>
    10de:	82 33       	cpi	r24, 0x32	; 50
    10e0:	31 f4       	brne	.+12     	; 0x10ee <main+0x352>
    10e2:	d6 01       	movw	r26, r12
    10e4:	1b 96       	adiw	r26, 0x0b	; 11
    10e6:	5c 92       	st	X, r5
    10e8:	4e 92       	st	-X, r4
    10ea:	1a 97       	sbiw	r26, 0x0a	; 10
    10ec:	0a c0       	rjmp	.+20     	; 0x1102 <main+0x366>
    10ee:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
    10f2:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
    10f6:	39 c0       	rjmp	.+114    	; 0x116a <main+0x3ce>
    10f8:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
    10fc:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
    1100:	34 c0       	rjmp	.+104    	; 0x116a <main+0x3ce>
    1102:	10 93 29 06 	sts	0x0629, r17	; 0x800629 <send_ack+0x1>
    1106:	00 93 28 06 	sts	0x0628, r16	; 0x800628 <send_ack>
    110a:	2f c0       	rjmp	.+94     	; 0x116a <main+0x3ce>
    110c:	83 34       	cpi	r24, 0x43	; 67
    110e:	11 f5       	brne	.+68     	; 0x1154 <main+0x3b8>
    1110:	f1 01       	movw	r30, r2
    1112:	81 81       	ldd	r24, Z+1	; 0x01
    1114:	8f 34       	cpi	r24, 0x4F	; 79
    1116:	f1 f4       	brne	.+60     	; 0x1154 <main+0x3b8>
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	8e 34       	cpi	r24, 0x4E	; 78
    111c:	d9 f4       	brne	.+54     	; 0x1154 <main+0x3b8>
    111e:	83 81       	ldd	r24, Z+3	; 0x03
    1120:	84 35       	cpi	r24, 0x54	; 84
    1122:	c1 f4       	brne	.+48     	; 0x1154 <main+0x3b8>
    1124:	84 81       	ldd	r24, Z+4	; 0x04
    1126:	89 34       	cpi	r24, 0x49	; 73
    1128:	a9 f4       	brne	.+42     	; 0x1154 <main+0x3b8>
    112a:	85 81       	ldd	r24, Z+5	; 0x05
    112c:	8e 34       	cpi	r24, 0x4E	; 78
    112e:	91 f4       	brne	.+36     	; 0x1154 <main+0x3b8>
    1130:	86 81       	ldd	r24, Z+6	; 0x06
    1132:	85 35       	cpi	r24, 0x55	; 85
    1134:	79 f4       	brne	.+30     	; 0x1154 <main+0x3b8>
    1136:	87 81       	ldd	r24, Z+7	; 0x07
    1138:	85 34       	cpi	r24, 0x45	; 69
    113a:	61 f4       	brne	.+24     	; 0x1154 <main+0x3b8>
    113c:	80 85       	ldd	r24, Z+8	; 0x08
    113e:	85 34       	cpi	r24, 0x45	; 69
    1140:	49 f4       	brne	.+18     	; 0x1154 <main+0x3b8>
    1142:	10 93 29 06 	sts	0x0629, r17	; 0x800629 <send_ack+0x1>
    1146:	00 93 28 06 	sts	0x0628, r16	; 0x800628 <send_ack>
    114a:	10 93 27 06 	sts	0x0627, r17	; 0x800627 <__data_end+0x1>
    114e:	00 93 26 06 	sts	0x0626, r16	; 0x800626 <__data_end>
    1152:	05 c0       	rjmp	.+10     	; 0x115e <main+0x3c2>
    1154:	10 93 2b 06 	sts	0x062B, r17	; 0x80062b <format_error+0x1>
    1158:	00 93 2a 06 	sts	0x062A, r16	; 0x80062a <format_error>
    115c:	06 c0       	rjmp	.+12     	; 0x116a <main+0x3ce>
    115e:	8f e3       	ldi	r24, 0x3F	; 63
    1160:	9c e9       	ldi	r25, 0x9C	; 156
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <main+0x3c6>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <main+0x3cc>
    1168:	00 00       	nop
    116a:	d7 01       	movw	r26, r14
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	9c 91       	ld	r25, X
    1170:	11 97       	sbiw	r26, 0x01	; 1
    1172:	8c 91       	ld	r24, X
    1174:	98 13       	cpse	r25, r24
    1176:	8f ce       	rjmp	.-738    	; 0xe96 <main+0xfa>
    1178:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <one_second_interrup>
    117c:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <one_second_interrup+0x1>
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	09 f0       	breq	.+2      	; 0x1186 <main+0x3ea>
    1184:	7e ce       	rjmp	.-772    	; 0xe82 <main+0xe6>
    1186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    118a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	09 f0       	breq	.+2      	; 0x1194 <main+0x3f8>
    1192:	77 ce       	rjmp	.-786    	; 0xe82 <main+0xe6>
    1194:	10 92 3b 06 	sts	0x063B, r1	; 0x80063b <one_second_interrup+0x1>
    1198:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <one_second_interrup>
    119c:	88 e4       	ldi	r24, 0x48	; 72
    119e:	5c db       	rcall	.-2376   	; 0x858 <GetTemp>
    11a0:	ef e3       	ldi	r30, 0x3F	; 63
    11a2:	fc e9       	ldi	r31, 0x9C	; 156
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <main+0x408>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <main+0x40e>
    11aa:	00 00       	nop
    11ac:	6a ce       	rjmp	.-812    	; 0xe82 <main+0xe6>

000011ae <__vector_14>:
    11ae:	1f 92       	push	r1
    11b0:	0f 92       	push	r0
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	0f 92       	push	r0
    11b6:	11 24       	eor	r1, r1
    11b8:	2f 93       	push	r18
    11ba:	3f 93       	push	r19
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
    11c4:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <current_count_1>
    11c8:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <current_count_1+0x1>
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	90 93 56 06 	sts	0x0656, r25	; 0x800656 <current_count_1+0x1>
    11d2:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <current_count_1>
    11d6:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <one_second_counter>
    11da:	90 91 3f 06 	lds	r25, 0x063F	; 0x80063f <one_second_counter+0x1>
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <one_second_counter+0x1>
    11e4:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <one_second_counter>
    11e8:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <repeat_count_1>
    11ec:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <repeat_count_1+0x1>
    11f0:	89 2b       	or	r24, r25
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <__vector_14+0x48>
    11f4:	58 c0       	rjmp	.+176    	; 0x12a6 <__vector_14+0xf8>
    11f6:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <sample_count_1>
    11fa:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <sample_count_1+0x1>
    11fe:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <threshold_rep_1>
    1202:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <threshold_rep_1+0x1>
    1206:	82 17       	cp	r24, r18
    1208:	93 07       	cpc	r25, r19
    120a:	f4 f0       	brlt	.+60     	; 0x1248 <__vector_14+0x9a>
    120c:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <current_count_1>
    1210:	30 91 56 06 	lds	r19, 0x0656	; 0x800656 <current_count_1+0x1>
    1214:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <repeat_count_1>
    1218:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <repeat_count_1+0x1>
    121c:	28 17       	cp	r18, r24
    121e:	39 07       	cpc	r19, r25
    1220:	8c f1       	brlt	.+98     	; 0x1284 <__vector_14+0xd6>
    1222:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <wave_one_index>
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <wave_one_index>
    122c:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <sample_count_1>
    1230:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <sample_count_1+0x1>
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <sample_count_1+0x1>
    123a:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <sample_count_1>
    123e:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <current_count_1+0x1>
    1242:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <current_count_1>
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <__vector_14+0xd6>
    1248:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <repeat_count_1>
    124c:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <repeat_count_1+0x1>
    1250:	20 91 55 06 	lds	r18, 0x0655	; 0x800655 <current_count_1>
    1254:	30 91 56 06 	lds	r19, 0x0656	; 0x800656 <current_count_1+0x1>
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	28 17       	cp	r18, r24
    125c:	39 07       	cpc	r19, r25
    125e:	94 f0       	brlt	.+36     	; 0x1284 <__vector_14+0xd6>
    1260:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <wave_one_index>
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <wave_one_index>
    126a:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <sample_count_1>
    126e:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <sample_count_1+0x1>
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <sample_count_1+0x1>
    1278:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <sample_count_1>
    127c:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <current_count_1+0x1>
    1280:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <current_count_1>
    1284:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <sample_count_1>
    1288:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <sample_count_1+0x1>
    128c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <scale>
    1290:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <scale+0x1>
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	09 f0       	breq	.+2      	; 0x129c <__vector_14+0xee>
    129a:	4c c0       	rjmp	.+152    	; 0x1334 <__vector_14+0x186>
    129c:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <sample_count_1+0x1>
    12a0:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <sample_count_1>
    12a4:	47 c0       	rjmp	.+142    	; 0x1334 <__vector_14+0x186>
    12a6:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <inverse_repeat_1>
    12aa:	90 91 5e 08 	lds	r25, 0x085E	; 0x80085e <inverse_repeat_1+0x1>
    12ae:	89 2b       	or	r24, r25
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <__vector_14+0x106>
    12b2:	40 c0       	rjmp	.+128    	; 0x1334 <__vector_14+0x186>
    12b4:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <sample_count_1>
    12b8:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <sample_count_1+0x1>
    12bc:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <threshold_skip_1>
    12c0:	90 91 4f 06 	lds	r25, 0x064F	; 0x80064f <threshold_skip_1+0x1>
    12c4:	82 17       	cp	r24, r18
    12c6:	93 07       	cpc	r25, r19
    12c8:	9c f0       	brlt	.+38     	; 0x12f0 <__vector_14+0x142>
    12ca:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <inverse_repeat_1>
    12ce:	90 91 5e 08 	lds	r25, 0x085E	; 0x80085e <inverse_repeat_1+0x1>
    12d2:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <wave_one_index>
    12d6:	89 0f       	add	r24, r25
    12d8:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <wave_one_index>
    12dc:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <sample_count_1>
    12e0:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <sample_count_1+0x1>
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <sample_count_1+0x1>
    12ea:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <sample_count_1>
    12ee:	13 c0       	rjmp	.+38     	; 0x1316 <__vector_14+0x168>
    12f0:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <inverse_repeat_1>
    12f4:	90 91 5e 08 	lds	r25, 0x085E	; 0x80085e <inverse_repeat_1+0x1>
    12f8:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <wave_one_index>
    12fc:	9f 5f       	subi	r25, 0xFF	; 255
    12fe:	89 0f       	add	r24, r25
    1300:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <wave_one_index>
    1304:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <sample_count_1>
    1308:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <sample_count_1+0x1>
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <sample_count_1+0x1>
    1312:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <sample_count_1>
    1316:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <sample_count_1>
    131a:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <sample_count_1+0x1>
    131e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <scale>
    1322:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <scale+0x1>
    1326:	28 17       	cp	r18, r24
    1328:	39 07       	cpc	r19, r25
    132a:	21 f4       	brne	.+8      	; 0x1334 <__vector_14+0x186>
    132c:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <sample_count_1+0x1>
    1330:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <sample_count_1>
    1334:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <current_count_2>
    1338:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <current_count_2+0x1>
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <current_count_2+0x1>
    1342:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <current_count_2>
    1346:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <repeat_count_2>
    134a:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <repeat_count_2+0x1>
    134e:	89 2b       	or	r24, r25
    1350:	09 f4       	brne	.+2      	; 0x1354 <__vector_14+0x1a6>
    1352:	58 c0       	rjmp	.+176    	; 0x1404 <__vector_14+0x256>
    1354:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <sample_count_2>
    1358:	30 91 45 06 	lds	r19, 0x0645	; 0x800645 <sample_count_2+0x1>
    135c:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <threshold_rep_2>
    1360:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <threshold_rep_2+0x1>
    1364:	82 17       	cp	r24, r18
    1366:	93 07       	cpc	r25, r19
    1368:	f4 f0       	brlt	.+60     	; 0x13a6 <__vector_14+0x1f8>
    136a:	20 91 46 06 	lds	r18, 0x0646	; 0x800646 <current_count_2>
    136e:	30 91 47 06 	lds	r19, 0x0647	; 0x800647 <current_count_2+0x1>
    1372:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <repeat_count_2>
    1376:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <repeat_count_2+0x1>
    137a:	28 17       	cp	r18, r24
    137c:	39 07       	cpc	r19, r25
    137e:	8c f1       	brlt	.+98     	; 0x13e2 <__vector_14+0x234>
    1380:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <wave_two_index>
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <wave_two_index>
    138a:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <sample_count_2>
    138e:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <sample_count_2+0x1>
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <sample_count_2+0x1>
    1398:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <sample_count_2>
    139c:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <current_count_2+0x1>
    13a0:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <current_count_2>
    13a4:	1e c0       	rjmp	.+60     	; 0x13e2 <__vector_14+0x234>
    13a6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <repeat_count_2>
    13aa:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <repeat_count_2+0x1>
    13ae:	20 91 46 06 	lds	r18, 0x0646	; 0x800646 <current_count_2>
    13b2:	30 91 47 06 	lds	r19, 0x0647	; 0x800647 <current_count_2+0x1>
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	28 17       	cp	r18, r24
    13ba:	39 07       	cpc	r19, r25
    13bc:	94 f0       	brlt	.+36     	; 0x13e2 <__vector_14+0x234>
    13be:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <wave_two_index>
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <wave_two_index>
    13c8:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <sample_count_2>
    13cc:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <sample_count_2+0x1>
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <sample_count_2+0x1>
    13d6:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <sample_count_2>
    13da:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <current_count_2+0x1>
    13de:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <current_count_2>
    13e2:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <sample_count_2>
    13e6:	30 91 45 06 	lds	r19, 0x0645	; 0x800645 <sample_count_2+0x1>
    13ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <scale>
    13ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <scale+0x1>
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__vector_14+0x24c>
    13f8:	52 c0       	rjmp	.+164    	; 0x149e <__vector_14+0x2f0>
    13fa:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <sample_count_2+0x1>
    13fe:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <sample_count_2>
    1402:	4d c0       	rjmp	.+154    	; 0x149e <__vector_14+0x2f0>
    1404:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <inverse_repeat_2>
    1408:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <inverse_repeat_2+0x1>
    140c:	89 2b       	or	r24, r25
    140e:	09 f4       	brne	.+2      	; 0x1412 <__vector_14+0x264>
    1410:	46 c0       	rjmp	.+140    	; 0x149e <__vector_14+0x2f0>
    1412:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <sample_count_2>
    1416:	30 91 45 06 	lds	r19, 0x0645	; 0x800645 <sample_count_2+0x1>
    141a:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <threshold_skip_2>
    141e:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <threshold_skip_2+0x1>
    1422:	82 17       	cp	r24, r18
    1424:	93 07       	cpc	r25, r19
    1426:	34 f4       	brge	.+12     	; 0x1434 <__vector_14+0x286>
    1428:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <inverse_repeat_2>
    142c:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <inverse_repeat_2+0x1>
    1430:	89 97       	sbiw	r24, 0x29	; 41
    1432:	9c f0       	brlt	.+38     	; 0x145a <__vector_14+0x2ac>
    1434:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <inverse_repeat_2>
    1438:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <inverse_repeat_2+0x1>
    143c:	90 91 4d 06 	lds	r25, 0x064D	; 0x80064d <wave_two_index>
    1440:	89 0f       	add	r24, r25
    1442:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <wave_two_index>
    1446:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <sample_count_2>
    144a:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <sample_count_2+0x1>
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <sample_count_2+0x1>
    1454:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <sample_count_2>
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <__vector_14+0x2d2>
    145a:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <inverse_repeat_2>
    145e:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <inverse_repeat_2+0x1>
    1462:	90 91 4d 06 	lds	r25, 0x064D	; 0x80064d <wave_two_index>
    1466:	9f 5f       	subi	r25, 0xFF	; 255
    1468:	89 0f       	add	r24, r25
    146a:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <wave_two_index>
    146e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <sample_count_2>
    1472:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <sample_count_2+0x1>
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <sample_count_2+0x1>
    147c:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <sample_count_2>
    1480:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <sample_count_2>
    1484:	30 91 45 06 	lds	r19, 0x0645	; 0x800645 <sample_count_2+0x1>
    1488:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <scale>
    148c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <scale+0x1>
    1490:	28 17       	cp	r18, r24
    1492:	39 07       	cpc	r19, r25
    1494:	21 f4       	brne	.+8      	; 0x149e <__vector_14+0x2f0>
    1496:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <sample_count_2+0x1>
    149a:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <sample_count_2>
    149e:	e0 91 59 06 	lds	r30, 0x0659	; 0x800659 <wave_one_index>
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	e6 5a       	subi	r30, 0xA6	; 166
    14a6:	f8 4f       	sbci	r31, 0xF8	; 248
    14a8:	80 81       	ld	r24, Z
    14aa:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <wave_out_1>
    14ae:	85 b1       	in	r24, 0x05	; 5
    14b0:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <temp_b>
    14b4:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <temp_b>
    14b8:	80 7c       	andi	r24, 0xC0	; 192
    14ba:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <temp_b>
    14be:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <wave_out_1>
    14c2:	90 91 8b 08 	lds	r25, 0x088B	; 0x80088b <temp_b>
    14c6:	86 95       	lsr	r24
    14c8:	86 95       	lsr	r24
    14ca:	89 2b       	or	r24, r25
    14cc:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <temp_b>
    14d0:	88 b1       	in	r24, 0x08	; 8
    14d2:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <temp_c>
    14d6:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <temp_c>
    14da:	83 7f       	andi	r24, 0xF3	; 243
    14dc:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <temp_c>
    14e0:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <wave_out_1>
    14e4:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <temp_c>
    14e8:	83 70       	andi	r24, 0x03	; 3
    14ea:	88 0f       	add	r24, r24
    14ec:	88 0f       	add	r24, r24
    14ee:	89 2b       	or	r24, r25
    14f0:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <temp_c>
    14f4:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <wave_two_index>
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e6 5a       	subi	r30, 0xA6	; 166
    14fc:	f9 4f       	sbci	r31, 0xF9	; 249
    14fe:	80 81       	ld	r24, Z
    1500:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <wave_out_2>
    1504:	8b b1       	in	r24, 0x0b	; 11
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	90 93 4c 06 	sts	0x064C, r25	; 0x80064c <tempD+0x1>
    150c:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <tempD>
    1510:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <tempD>
    1514:	90 91 4c 06 	lds	r25, 0x064C	; 0x80064c <tempD+0x1>
    1518:	83 70       	andi	r24, 0x03	; 3
    151a:	99 27       	eor	r25, r25
    151c:	90 93 4c 06 	sts	0x064C, r25	; 0x80064c <tempD+0x1>
    1520:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <tempD>
    1524:	20 91 4a 06 	lds	r18, 0x064A	; 0x80064a <wave_out_2>
    1528:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <tempD>
    152c:	90 91 4c 06 	lds	r25, 0x064C	; 0x80064c <tempD+0x1>
    1530:	2c 7f       	andi	r18, 0xFC	; 252
    1532:	82 2b       	or	r24, r18
    1534:	90 93 4c 06 	sts	0x064C, r25	; 0x80064c <tempD+0x1>
    1538:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <tempD>
    153c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <temp_c>
    1540:	8c 7f       	andi	r24, 0xFC	; 252
    1542:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <temp_c>
    1546:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <wave_out_2>
    154a:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <temp_c>
    154e:	83 70       	andi	r24, 0x03	; 3
    1550:	89 2b       	or	r24, r25
    1552:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <temp_c>
    1556:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <temp_b>
    155a:	85 b9       	out	0x05, r24	; 5
    155c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <temp_c>
    1560:	88 b9       	out	0x08, r24	; 8
    1562:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <tempD>
    1566:	90 91 4c 06 	lds	r25, 0x064C	; 0x80064c <tempD+0x1>
    156a:	8b b9       	out	0x0b, r24	; 11
    156c:	ff 91       	pop	r31
    156e:	ef 91       	pop	r30
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__subsf3>:
    1582:	50 58       	subi	r21, 0x80	; 128

00001584 <__addsf3>:
    1584:	bb 27       	eor	r27, r27
    1586:	aa 27       	eor	r26, r26
    1588:	0e d0       	rcall	.+28     	; 0x15a6 <__addsf3x>
    158a:	75 c1       	rjmp	.+746    	; 0x1876 <__fp_round>
    158c:	66 d1       	rcall	.+716    	; 0x185a <__fp_pscA>
    158e:	30 f0       	brcs	.+12     	; 0x159c <__addsf3+0x18>
    1590:	6b d1       	rcall	.+726    	; 0x1868 <__fp_pscB>
    1592:	20 f0       	brcs	.+8      	; 0x159c <__addsf3+0x18>
    1594:	31 f4       	brne	.+12     	; 0x15a2 <__addsf3+0x1e>
    1596:	9f 3f       	cpi	r25, 0xFF	; 255
    1598:	11 f4       	brne	.+4      	; 0x159e <__addsf3+0x1a>
    159a:	1e f4       	brtc	.+6      	; 0x15a2 <__addsf3+0x1e>
    159c:	5b c1       	rjmp	.+694    	; 0x1854 <__fp_nan>
    159e:	0e f4       	brtc	.+2      	; 0x15a2 <__addsf3+0x1e>
    15a0:	e0 95       	com	r30
    15a2:	e7 fb       	bst	r30, 7
    15a4:	51 c1       	rjmp	.+674    	; 0x1848 <__fp_inf>

000015a6 <__addsf3x>:
    15a6:	e9 2f       	mov	r30, r25
    15a8:	77 d1       	rcall	.+750    	; 0x1898 <__fp_split3>
    15aa:	80 f3       	brcs	.-32     	; 0x158c <__addsf3+0x8>
    15ac:	ba 17       	cp	r27, r26
    15ae:	62 07       	cpc	r22, r18
    15b0:	73 07       	cpc	r23, r19
    15b2:	84 07       	cpc	r24, r20
    15b4:	95 07       	cpc	r25, r21
    15b6:	18 f0       	brcs	.+6      	; 0x15be <__addsf3x+0x18>
    15b8:	71 f4       	brne	.+28     	; 0x15d6 <__addsf3x+0x30>
    15ba:	9e f5       	brtc	.+102    	; 0x1622 <__addsf3x+0x7c>
    15bc:	8f c1       	rjmp	.+798    	; 0x18dc <__fp_zero>
    15be:	0e f4       	brtc	.+2      	; 0x15c2 <__addsf3x+0x1c>
    15c0:	e0 95       	com	r30
    15c2:	0b 2e       	mov	r0, r27
    15c4:	ba 2f       	mov	r27, r26
    15c6:	a0 2d       	mov	r26, r0
    15c8:	0b 01       	movw	r0, r22
    15ca:	b9 01       	movw	r22, r18
    15cc:	90 01       	movw	r18, r0
    15ce:	0c 01       	movw	r0, r24
    15d0:	ca 01       	movw	r24, r20
    15d2:	a0 01       	movw	r20, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	ff 27       	eor	r31, r31
    15d8:	59 1b       	sub	r21, r25
    15da:	99 f0       	breq	.+38     	; 0x1602 <__addsf3x+0x5c>
    15dc:	59 3f       	cpi	r21, 0xF9	; 249
    15de:	50 f4       	brcc	.+20     	; 0x15f4 <__addsf3x+0x4e>
    15e0:	50 3e       	cpi	r21, 0xE0	; 224
    15e2:	68 f1       	brcs	.+90     	; 0x163e <__addsf3x+0x98>
    15e4:	1a 16       	cp	r1, r26
    15e6:	f0 40       	sbci	r31, 0x00	; 0
    15e8:	a2 2f       	mov	r26, r18
    15ea:	23 2f       	mov	r18, r19
    15ec:	34 2f       	mov	r19, r20
    15ee:	44 27       	eor	r20, r20
    15f0:	58 5f       	subi	r21, 0xF8	; 248
    15f2:	f3 cf       	rjmp	.-26     	; 0x15da <__addsf3x+0x34>
    15f4:	46 95       	lsr	r20
    15f6:	37 95       	ror	r19
    15f8:	27 95       	ror	r18
    15fa:	a7 95       	ror	r26
    15fc:	f0 40       	sbci	r31, 0x00	; 0
    15fe:	53 95       	inc	r21
    1600:	c9 f7       	brne	.-14     	; 0x15f4 <__addsf3x+0x4e>
    1602:	7e f4       	brtc	.+30     	; 0x1622 <__addsf3x+0x7c>
    1604:	1f 16       	cp	r1, r31
    1606:	ba 0b       	sbc	r27, r26
    1608:	62 0b       	sbc	r22, r18
    160a:	73 0b       	sbc	r23, r19
    160c:	84 0b       	sbc	r24, r20
    160e:	ba f0       	brmi	.+46     	; 0x163e <__addsf3x+0x98>
    1610:	91 50       	subi	r25, 0x01	; 1
    1612:	a1 f0       	breq	.+40     	; 0x163c <__addsf3x+0x96>
    1614:	ff 0f       	add	r31, r31
    1616:	bb 1f       	adc	r27, r27
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	c2 f7       	brpl	.-16     	; 0x1610 <__addsf3x+0x6a>
    1620:	0e c0       	rjmp	.+28     	; 0x163e <__addsf3x+0x98>
    1622:	ba 0f       	add	r27, r26
    1624:	62 1f       	adc	r22, r18
    1626:	73 1f       	adc	r23, r19
    1628:	84 1f       	adc	r24, r20
    162a:	48 f4       	brcc	.+18     	; 0x163e <__addsf3x+0x98>
    162c:	87 95       	ror	r24
    162e:	77 95       	ror	r23
    1630:	67 95       	ror	r22
    1632:	b7 95       	ror	r27
    1634:	f7 95       	ror	r31
    1636:	9e 3f       	cpi	r25, 0xFE	; 254
    1638:	08 f0       	brcs	.+2      	; 0x163c <__addsf3x+0x96>
    163a:	b3 cf       	rjmp	.-154    	; 0x15a2 <__addsf3+0x1e>
    163c:	93 95       	inc	r25
    163e:	88 0f       	add	r24, r24
    1640:	08 f0       	brcs	.+2      	; 0x1644 <__addsf3x+0x9e>
    1642:	99 27       	eor	r25, r25
    1644:	ee 0f       	add	r30, r30
    1646:	97 95       	ror	r25
    1648:	87 95       	ror	r24
    164a:	08 95       	ret

0000164c <__cmpsf2>:
    164c:	d9 d0       	rcall	.+434    	; 0x1800 <__fp_cmp>
    164e:	08 f4       	brcc	.+2      	; 0x1652 <__cmpsf2+0x6>
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	08 95       	ret

00001654 <__divsf3>:
    1654:	0c d0       	rcall	.+24     	; 0x166e <__divsf3x>
    1656:	0f c1       	rjmp	.+542    	; 0x1876 <__fp_round>
    1658:	07 d1       	rcall	.+526    	; 0x1868 <__fp_pscB>
    165a:	40 f0       	brcs	.+16     	; 0x166c <__divsf3+0x18>
    165c:	fe d0       	rcall	.+508    	; 0x185a <__fp_pscA>
    165e:	30 f0       	brcs	.+12     	; 0x166c <__divsf3+0x18>
    1660:	21 f4       	brne	.+8      	; 0x166a <__divsf3+0x16>
    1662:	5f 3f       	cpi	r21, 0xFF	; 255
    1664:	19 f0       	breq	.+6      	; 0x166c <__divsf3+0x18>
    1666:	f0 c0       	rjmp	.+480    	; 0x1848 <__fp_inf>
    1668:	51 11       	cpse	r21, r1
    166a:	39 c1       	rjmp	.+626    	; 0x18de <__fp_szero>
    166c:	f3 c0       	rjmp	.+486    	; 0x1854 <__fp_nan>

0000166e <__divsf3x>:
    166e:	14 d1       	rcall	.+552    	; 0x1898 <__fp_split3>
    1670:	98 f3       	brcs	.-26     	; 0x1658 <__divsf3+0x4>

00001672 <__divsf3_pse>:
    1672:	99 23       	and	r25, r25
    1674:	c9 f3       	breq	.-14     	; 0x1668 <__divsf3+0x14>
    1676:	55 23       	and	r21, r21
    1678:	b1 f3       	breq	.-20     	; 0x1666 <__divsf3+0x12>
    167a:	95 1b       	sub	r25, r21
    167c:	55 0b       	sbc	r21, r21
    167e:	bb 27       	eor	r27, r27
    1680:	aa 27       	eor	r26, r26
    1682:	62 17       	cp	r22, r18
    1684:	73 07       	cpc	r23, r19
    1686:	84 07       	cpc	r24, r20
    1688:	38 f0       	brcs	.+14     	; 0x1698 <__divsf3_pse+0x26>
    168a:	9f 5f       	subi	r25, 0xFF	; 255
    168c:	5f 4f       	sbci	r21, 0xFF	; 255
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	44 1f       	adc	r20, r20
    1694:	aa 1f       	adc	r26, r26
    1696:	a9 f3       	breq	.-22     	; 0x1682 <__divsf3_pse+0x10>
    1698:	33 d0       	rcall	.+102    	; 0x1700 <__divsf3_pse+0x8e>
    169a:	0e 2e       	mov	r0, r30
    169c:	3a f0       	brmi	.+14     	; 0x16ac <__divsf3_pse+0x3a>
    169e:	e0 e8       	ldi	r30, 0x80	; 128
    16a0:	30 d0       	rcall	.+96     	; 0x1702 <__divsf3_pse+0x90>
    16a2:	91 50       	subi	r25, 0x01	; 1
    16a4:	50 40       	sbci	r21, 0x00	; 0
    16a6:	e6 95       	lsr	r30
    16a8:	00 1c       	adc	r0, r0
    16aa:	ca f7       	brpl	.-14     	; 0x169e <__divsf3_pse+0x2c>
    16ac:	29 d0       	rcall	.+82     	; 0x1700 <__divsf3_pse+0x8e>
    16ae:	fe 2f       	mov	r31, r30
    16b0:	27 d0       	rcall	.+78     	; 0x1700 <__divsf3_pse+0x8e>
    16b2:	66 0f       	add	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	bb 1f       	adc	r27, r27
    16ba:	26 17       	cp	r18, r22
    16bc:	37 07       	cpc	r19, r23
    16be:	48 07       	cpc	r20, r24
    16c0:	ab 07       	cpc	r26, r27
    16c2:	b0 e8       	ldi	r27, 0x80	; 128
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <__divsf3_pse+0x56>
    16c6:	bb 0b       	sbc	r27, r27
    16c8:	80 2d       	mov	r24, r0
    16ca:	bf 01       	movw	r22, r30
    16cc:	ff 27       	eor	r31, r31
    16ce:	93 58       	subi	r25, 0x83	; 131
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	2a f0       	brmi	.+10     	; 0x16de <__divsf3_pse+0x6c>
    16d4:	9e 3f       	cpi	r25, 0xFE	; 254
    16d6:	51 05       	cpc	r21, r1
    16d8:	68 f0       	brcs	.+26     	; 0x16f4 <__divsf3_pse+0x82>
    16da:	b6 c0       	rjmp	.+364    	; 0x1848 <__fp_inf>
    16dc:	00 c1       	rjmp	.+512    	; 0x18de <__fp_szero>
    16de:	5f 3f       	cpi	r21, 0xFF	; 255
    16e0:	ec f3       	brlt	.-6      	; 0x16dc <__divsf3_pse+0x6a>
    16e2:	98 3e       	cpi	r25, 0xE8	; 232
    16e4:	dc f3       	brlt	.-10     	; 0x16dc <__divsf3_pse+0x6a>
    16e6:	86 95       	lsr	r24
    16e8:	77 95       	ror	r23
    16ea:	67 95       	ror	r22
    16ec:	b7 95       	ror	r27
    16ee:	f7 95       	ror	r31
    16f0:	9f 5f       	subi	r25, 0xFF	; 255
    16f2:	c9 f7       	brne	.-14     	; 0x16e6 <__divsf3_pse+0x74>
    16f4:	88 0f       	add	r24, r24
    16f6:	91 1d       	adc	r25, r1
    16f8:	96 95       	lsr	r25
    16fa:	87 95       	ror	r24
    16fc:	97 f9       	bld	r25, 7
    16fe:	08 95       	ret
    1700:	e1 e0       	ldi	r30, 0x01	; 1
    1702:	66 0f       	add	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	88 1f       	adc	r24, r24
    1708:	bb 1f       	adc	r27, r27
    170a:	62 17       	cp	r22, r18
    170c:	73 07       	cpc	r23, r19
    170e:	84 07       	cpc	r24, r20
    1710:	ba 07       	cpc	r27, r26
    1712:	20 f0       	brcs	.+8      	; 0x171c <__divsf3_pse+0xaa>
    1714:	62 1b       	sub	r22, r18
    1716:	73 0b       	sbc	r23, r19
    1718:	84 0b       	sbc	r24, r20
    171a:	ba 0b       	sbc	r27, r26
    171c:	ee 1f       	adc	r30, r30
    171e:	88 f7       	brcc	.-30     	; 0x1702 <__divsf3_pse+0x90>
    1720:	e0 95       	com	r30
    1722:	08 95       	ret

00001724 <__fixsfsi>:
    1724:	04 d0       	rcall	.+8      	; 0x172e <__fixunssfsi>
    1726:	68 94       	set
    1728:	b1 11       	cpse	r27, r1
    172a:	d9 c0       	rjmp	.+434    	; 0x18de <__fp_szero>
    172c:	08 95       	ret

0000172e <__fixunssfsi>:
    172e:	bc d0       	rcall	.+376    	; 0x18a8 <__fp_splitA>
    1730:	88 f0       	brcs	.+34     	; 0x1754 <__fixunssfsi+0x26>
    1732:	9f 57       	subi	r25, 0x7F	; 127
    1734:	90 f0       	brcs	.+36     	; 0x175a <__fixunssfsi+0x2c>
    1736:	b9 2f       	mov	r27, r25
    1738:	99 27       	eor	r25, r25
    173a:	b7 51       	subi	r27, 0x17	; 23
    173c:	a0 f0       	brcs	.+40     	; 0x1766 <__fixunssfsi+0x38>
    173e:	d1 f0       	breq	.+52     	; 0x1774 <__fixunssfsi+0x46>
    1740:	66 0f       	add	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	88 1f       	adc	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	1a f0       	brmi	.+6      	; 0x1750 <__fixunssfsi+0x22>
    174a:	ba 95       	dec	r27
    174c:	c9 f7       	brne	.-14     	; 0x1740 <__fixunssfsi+0x12>
    174e:	12 c0       	rjmp	.+36     	; 0x1774 <__fixunssfsi+0x46>
    1750:	b1 30       	cpi	r27, 0x01	; 1
    1752:	81 f0       	breq	.+32     	; 0x1774 <__fixunssfsi+0x46>
    1754:	c3 d0       	rcall	.+390    	; 0x18dc <__fp_zero>
    1756:	b1 e0       	ldi	r27, 0x01	; 1
    1758:	08 95       	ret
    175a:	c0 c0       	rjmp	.+384    	; 0x18dc <__fp_zero>
    175c:	67 2f       	mov	r22, r23
    175e:	78 2f       	mov	r23, r24
    1760:	88 27       	eor	r24, r24
    1762:	b8 5f       	subi	r27, 0xF8	; 248
    1764:	39 f0       	breq	.+14     	; 0x1774 <__fixunssfsi+0x46>
    1766:	b9 3f       	cpi	r27, 0xF9	; 249
    1768:	cc f3       	brlt	.-14     	; 0x175c <__fixunssfsi+0x2e>
    176a:	86 95       	lsr	r24
    176c:	77 95       	ror	r23
    176e:	67 95       	ror	r22
    1770:	b3 95       	inc	r27
    1772:	d9 f7       	brne	.-10     	; 0x176a <__fixunssfsi+0x3c>
    1774:	3e f4       	brtc	.+14     	; 0x1784 <__fixunssfsi+0x56>
    1776:	90 95       	com	r25
    1778:	80 95       	com	r24
    177a:	70 95       	com	r23
    177c:	61 95       	neg	r22
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	8f 4f       	sbci	r24, 0xFF	; 255
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	08 95       	ret

00001786 <__floatunsisf>:
    1786:	e8 94       	clt
    1788:	09 c0       	rjmp	.+18     	; 0x179c <__floatsisf+0x12>

0000178a <__floatsisf>:
    178a:	97 fb       	bst	r25, 7
    178c:	3e f4       	brtc	.+14     	; 0x179c <__floatsisf+0x12>
    178e:	90 95       	com	r25
    1790:	80 95       	com	r24
    1792:	70 95       	com	r23
    1794:	61 95       	neg	r22
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	99 23       	and	r25, r25
    179e:	a9 f0       	breq	.+42     	; 0x17ca <__floatsisf+0x40>
    17a0:	f9 2f       	mov	r31, r25
    17a2:	96 e9       	ldi	r25, 0x96	; 150
    17a4:	bb 27       	eor	r27, r27
    17a6:	93 95       	inc	r25
    17a8:	f6 95       	lsr	r31
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b7 95       	ror	r27
    17b2:	f1 11       	cpse	r31, r1
    17b4:	f8 cf       	rjmp	.-16     	; 0x17a6 <__floatsisf+0x1c>
    17b6:	fa f4       	brpl	.+62     	; 0x17f6 <__floatsisf+0x6c>
    17b8:	bb 0f       	add	r27, r27
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <__floatsisf+0x36>
    17bc:	60 ff       	sbrs	r22, 0
    17be:	1b c0       	rjmp	.+54     	; 0x17f6 <__floatsisf+0x6c>
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	8f 4f       	sbci	r24, 0xFF	; 255
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <__floatsisf+0x6c>
    17ca:	88 23       	and	r24, r24
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <__floatsisf+0x48>
    17ce:	96 e9       	ldi	r25, 0x96	; 150
    17d0:	11 c0       	rjmp	.+34     	; 0x17f4 <__floatsisf+0x6a>
    17d2:	77 23       	and	r23, r23
    17d4:	21 f0       	breq	.+8      	; 0x17de <__floatsisf+0x54>
    17d6:	9e e8       	ldi	r25, 0x8E	; 142
    17d8:	87 2f       	mov	r24, r23
    17da:	76 2f       	mov	r23, r22
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <__floatsisf+0x5e>
    17de:	66 23       	and	r22, r22
    17e0:	71 f0       	breq	.+28     	; 0x17fe <__floatsisf+0x74>
    17e2:	96 e8       	ldi	r25, 0x86	; 134
    17e4:	86 2f       	mov	r24, r22
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	2a f0       	brmi	.+10     	; 0x17f6 <__floatsisf+0x6c>
    17ec:	9a 95       	dec	r25
    17ee:	66 0f       	add	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	88 1f       	adc	r24, r24
    17f4:	da f7       	brpl	.-10     	; 0x17ec <__floatsisf+0x62>
    17f6:	88 0f       	add	r24, r24
    17f8:	96 95       	lsr	r25
    17fa:	87 95       	ror	r24
    17fc:	97 f9       	bld	r25, 7
    17fe:	08 95       	ret

00001800 <__fp_cmp>:
    1800:	99 0f       	add	r25, r25
    1802:	00 08       	sbc	r0, r0
    1804:	55 0f       	add	r21, r21
    1806:	aa 0b       	sbc	r26, r26
    1808:	e0 e8       	ldi	r30, 0x80	; 128
    180a:	fe ef       	ldi	r31, 0xFE	; 254
    180c:	16 16       	cp	r1, r22
    180e:	17 06       	cpc	r1, r23
    1810:	e8 07       	cpc	r30, r24
    1812:	f9 07       	cpc	r31, r25
    1814:	c0 f0       	brcs	.+48     	; 0x1846 <__fp_cmp+0x46>
    1816:	12 16       	cp	r1, r18
    1818:	13 06       	cpc	r1, r19
    181a:	e4 07       	cpc	r30, r20
    181c:	f5 07       	cpc	r31, r21
    181e:	98 f0       	brcs	.+38     	; 0x1846 <__fp_cmp+0x46>
    1820:	62 1b       	sub	r22, r18
    1822:	73 0b       	sbc	r23, r19
    1824:	84 0b       	sbc	r24, r20
    1826:	95 0b       	sbc	r25, r21
    1828:	39 f4       	brne	.+14     	; 0x1838 <__fp_cmp+0x38>
    182a:	0a 26       	eor	r0, r26
    182c:	61 f0       	breq	.+24     	; 0x1846 <__fp_cmp+0x46>
    182e:	23 2b       	or	r18, r19
    1830:	24 2b       	or	r18, r20
    1832:	25 2b       	or	r18, r21
    1834:	21 f4       	brne	.+8      	; 0x183e <__fp_cmp+0x3e>
    1836:	08 95       	ret
    1838:	0a 26       	eor	r0, r26
    183a:	09 f4       	brne	.+2      	; 0x183e <__fp_cmp+0x3e>
    183c:	a1 40       	sbci	r26, 0x01	; 1
    183e:	a6 95       	lsr	r26
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	81 1d       	adc	r24, r1
    1844:	81 1d       	adc	r24, r1
    1846:	08 95       	ret

00001848 <__fp_inf>:
    1848:	97 f9       	bld	r25, 7
    184a:	9f 67       	ori	r25, 0x7F	; 127
    184c:	80 e8       	ldi	r24, 0x80	; 128
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	08 95       	ret

00001854 <__fp_nan>:
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	80 ec       	ldi	r24, 0xC0	; 192
    1858:	08 95       	ret

0000185a <__fp_pscA>:
    185a:	00 24       	eor	r0, r0
    185c:	0a 94       	dec	r0
    185e:	16 16       	cp	r1, r22
    1860:	17 06       	cpc	r1, r23
    1862:	18 06       	cpc	r1, r24
    1864:	09 06       	cpc	r0, r25
    1866:	08 95       	ret

00001868 <__fp_pscB>:
    1868:	00 24       	eor	r0, r0
    186a:	0a 94       	dec	r0
    186c:	12 16       	cp	r1, r18
    186e:	13 06       	cpc	r1, r19
    1870:	14 06       	cpc	r1, r20
    1872:	05 06       	cpc	r0, r21
    1874:	08 95       	ret

00001876 <__fp_round>:
    1876:	09 2e       	mov	r0, r25
    1878:	03 94       	inc	r0
    187a:	00 0c       	add	r0, r0
    187c:	11 f4       	brne	.+4      	; 0x1882 <__fp_round+0xc>
    187e:	88 23       	and	r24, r24
    1880:	52 f0       	brmi	.+20     	; 0x1896 <__fp_round+0x20>
    1882:	bb 0f       	add	r27, r27
    1884:	40 f4       	brcc	.+16     	; 0x1896 <__fp_round+0x20>
    1886:	bf 2b       	or	r27, r31
    1888:	11 f4       	brne	.+4      	; 0x188e <__fp_round+0x18>
    188a:	60 ff       	sbrs	r22, 0
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <__fp_round+0x20>
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <__fp_split3>:
    1898:	57 fd       	sbrc	r21, 7
    189a:	90 58       	subi	r25, 0x80	; 128
    189c:	44 0f       	add	r20, r20
    189e:	55 1f       	adc	r21, r21
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <__fp_splitA+0x10>
    18a2:	5f 3f       	cpi	r21, 0xFF	; 255
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <__fp_splitA+0x1a>
    18a6:	47 95       	ror	r20

000018a8 <__fp_splitA>:
    18a8:	88 0f       	add	r24, r24
    18aa:	97 fb       	bst	r25, 7
    18ac:	99 1f       	adc	r25, r25
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <__fp_splitA+0x20>
    18b0:	9f 3f       	cpi	r25, 0xFF	; 255
    18b2:	79 f0       	breq	.+30     	; 0x18d2 <__fp_splitA+0x2a>
    18b4:	87 95       	ror	r24
    18b6:	08 95       	ret
    18b8:	12 16       	cp	r1, r18
    18ba:	13 06       	cpc	r1, r19
    18bc:	14 06       	cpc	r1, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	f2 cf       	rjmp	.-28     	; 0x18a6 <__fp_split3+0xe>
    18c2:	46 95       	lsr	r20
    18c4:	f1 df       	rcall	.-30     	; 0x18a8 <__fp_splitA>
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <__fp_splitA+0x30>
    18c8:	16 16       	cp	r1, r22
    18ca:	17 06       	cpc	r1, r23
    18cc:	18 06       	cpc	r1, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	f1 cf       	rjmp	.-30     	; 0x18b4 <__fp_splitA+0xc>
    18d2:	86 95       	lsr	r24
    18d4:	71 05       	cpc	r23, r1
    18d6:	61 05       	cpc	r22, r1
    18d8:	08 94       	sec
    18da:	08 95       	ret

000018dc <__fp_zero>:
    18dc:	e8 94       	clt

000018de <__fp_szero>:
    18de:	bb 27       	eor	r27, r27
    18e0:	66 27       	eor	r22, r22
    18e2:	77 27       	eor	r23, r23
    18e4:	cb 01       	movw	r24, r22
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret

000018ea <__gesf2>:
    18ea:	8a df       	rcall	.-236    	; 0x1800 <__fp_cmp>
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <__gesf2+0x6>
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	08 95       	ret

000018f2 <__mulsf3>:
    18f2:	0b d0       	rcall	.+22     	; 0x190a <__mulsf3x>
    18f4:	c0 cf       	rjmp	.-128    	; 0x1876 <__fp_round>
    18f6:	b1 df       	rcall	.-158    	; 0x185a <__fp_pscA>
    18f8:	28 f0       	brcs	.+10     	; 0x1904 <__mulsf3+0x12>
    18fa:	b6 df       	rcall	.-148    	; 0x1868 <__fp_pscB>
    18fc:	18 f0       	brcs	.+6      	; 0x1904 <__mulsf3+0x12>
    18fe:	95 23       	and	r25, r21
    1900:	09 f0       	breq	.+2      	; 0x1904 <__mulsf3+0x12>
    1902:	a2 cf       	rjmp	.-188    	; 0x1848 <__fp_inf>
    1904:	a7 cf       	rjmp	.-178    	; 0x1854 <__fp_nan>
    1906:	11 24       	eor	r1, r1
    1908:	ea cf       	rjmp	.-44     	; 0x18de <__fp_szero>

0000190a <__mulsf3x>:
    190a:	c6 df       	rcall	.-116    	; 0x1898 <__fp_split3>
    190c:	a0 f3       	brcs	.-24     	; 0x18f6 <__mulsf3+0x4>

0000190e <__mulsf3_pse>:
    190e:	95 9f       	mul	r25, r21
    1910:	d1 f3       	breq	.-12     	; 0x1906 <__mulsf3+0x14>
    1912:	95 0f       	add	r25, r21
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	55 1f       	adc	r21, r21
    1918:	62 9f       	mul	r22, r18
    191a:	f0 01       	movw	r30, r0
    191c:	72 9f       	mul	r23, r18
    191e:	bb 27       	eor	r27, r27
    1920:	f0 0d       	add	r31, r0
    1922:	b1 1d       	adc	r27, r1
    1924:	63 9f       	mul	r22, r19
    1926:	aa 27       	eor	r26, r26
    1928:	f0 0d       	add	r31, r0
    192a:	b1 1d       	adc	r27, r1
    192c:	aa 1f       	adc	r26, r26
    192e:	64 9f       	mul	r22, r20
    1930:	66 27       	eor	r22, r22
    1932:	b0 0d       	add	r27, r0
    1934:	a1 1d       	adc	r26, r1
    1936:	66 1f       	adc	r22, r22
    1938:	82 9f       	mul	r24, r18
    193a:	22 27       	eor	r18, r18
    193c:	b0 0d       	add	r27, r0
    193e:	a1 1d       	adc	r26, r1
    1940:	62 1f       	adc	r22, r18
    1942:	73 9f       	mul	r23, r19
    1944:	b0 0d       	add	r27, r0
    1946:	a1 1d       	adc	r26, r1
    1948:	62 1f       	adc	r22, r18
    194a:	83 9f       	mul	r24, r19
    194c:	a0 0d       	add	r26, r0
    194e:	61 1d       	adc	r22, r1
    1950:	22 1f       	adc	r18, r18
    1952:	74 9f       	mul	r23, r20
    1954:	33 27       	eor	r19, r19
    1956:	a0 0d       	add	r26, r0
    1958:	61 1d       	adc	r22, r1
    195a:	23 1f       	adc	r18, r19
    195c:	84 9f       	mul	r24, r20
    195e:	60 0d       	add	r22, r0
    1960:	21 1d       	adc	r18, r1
    1962:	82 2f       	mov	r24, r18
    1964:	76 2f       	mov	r23, r22
    1966:	6a 2f       	mov	r22, r26
    1968:	11 24       	eor	r1, r1
    196a:	9f 57       	subi	r25, 0x7F	; 127
    196c:	50 40       	sbci	r21, 0x00	; 0
    196e:	8a f0       	brmi	.+34     	; 0x1992 <__mulsf3_pse+0x84>
    1970:	e1 f0       	breq	.+56     	; 0x19aa <__mulsf3_pse+0x9c>
    1972:	88 23       	and	r24, r24
    1974:	4a f0       	brmi	.+18     	; 0x1988 <__mulsf3_pse+0x7a>
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	bb 1f       	adc	r27, r27
    197c:	66 1f       	adc	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	88 1f       	adc	r24, r24
    1982:	91 50       	subi	r25, 0x01	; 1
    1984:	50 40       	sbci	r21, 0x00	; 0
    1986:	a9 f7       	brne	.-22     	; 0x1972 <__mulsf3_pse+0x64>
    1988:	9e 3f       	cpi	r25, 0xFE	; 254
    198a:	51 05       	cpc	r21, r1
    198c:	70 f0       	brcs	.+28     	; 0x19aa <__mulsf3_pse+0x9c>
    198e:	5c cf       	rjmp	.-328    	; 0x1848 <__fp_inf>
    1990:	a6 cf       	rjmp	.-180    	; 0x18de <__fp_szero>
    1992:	5f 3f       	cpi	r21, 0xFF	; 255
    1994:	ec f3       	brlt	.-6      	; 0x1990 <__mulsf3_pse+0x82>
    1996:	98 3e       	cpi	r25, 0xE8	; 232
    1998:	dc f3       	brlt	.-10     	; 0x1990 <__mulsf3_pse+0x82>
    199a:	86 95       	lsr	r24
    199c:	77 95       	ror	r23
    199e:	67 95       	ror	r22
    19a0:	b7 95       	ror	r27
    19a2:	f7 95       	ror	r31
    19a4:	e7 95       	ror	r30
    19a6:	9f 5f       	subi	r25, 0xFF	; 255
    19a8:	c1 f7       	brne	.-16     	; 0x199a <__mulsf3_pse+0x8c>
    19aa:	fe 2b       	or	r31, r30
    19ac:	88 0f       	add	r24, r24
    19ae:	91 1d       	adc	r25, r1
    19b0:	96 95       	lsr	r25
    19b2:	87 95       	ror	r24
    19b4:	97 f9       	bld	r25, 7
    19b6:	08 95       	ret

000019b8 <__divmodhi4>:
    19b8:	97 fb       	bst	r25, 7
    19ba:	07 2e       	mov	r0, r23
    19bc:	16 f4       	brtc	.+4      	; 0x19c2 <__divmodhi4+0xa>
    19be:	00 94       	com	r0
    19c0:	06 d0       	rcall	.+12     	; 0x19ce <__divmodhi4_neg1>
    19c2:	77 fd       	sbrc	r23, 7
    19c4:	08 d0       	rcall	.+16     	; 0x19d6 <__divmodhi4_neg2>
    19c6:	0b d0       	rcall	.+22     	; 0x19de <__udivmodhi4>
    19c8:	07 fc       	sbrc	r0, 7
    19ca:	05 d0       	rcall	.+10     	; 0x19d6 <__divmodhi4_neg2>
    19cc:	3e f4       	brtc	.+14     	; 0x19dc <__divmodhi4_exit>

000019ce <__divmodhi4_neg1>:
    19ce:	90 95       	com	r25
    19d0:	81 95       	neg	r24
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	08 95       	ret

000019d6 <__divmodhi4_neg2>:
    19d6:	70 95       	com	r23
    19d8:	61 95       	neg	r22
    19da:	7f 4f       	sbci	r23, 0xFF	; 255

000019dc <__divmodhi4_exit>:
    19dc:	08 95       	ret

000019de <__udivmodhi4>:
    19de:	aa 1b       	sub	r26, r26
    19e0:	bb 1b       	sub	r27, r27
    19e2:	51 e1       	ldi	r21, 0x11	; 17
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <__udivmodhi4_ep>

000019e6 <__udivmodhi4_loop>:
    19e6:	aa 1f       	adc	r26, r26
    19e8:	bb 1f       	adc	r27, r27
    19ea:	a6 17       	cp	r26, r22
    19ec:	b7 07       	cpc	r27, r23
    19ee:	10 f0       	brcs	.+4      	; 0x19f4 <__udivmodhi4_ep>
    19f0:	a6 1b       	sub	r26, r22
    19f2:	b7 0b       	sbc	r27, r23

000019f4 <__udivmodhi4_ep>:
    19f4:	88 1f       	adc	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	5a 95       	dec	r21
    19fa:	a9 f7       	brne	.-22     	; 0x19e6 <__udivmodhi4_loop>
    19fc:	80 95       	com	r24
    19fe:	90 95       	com	r25
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	08 95       	ret

00001a06 <strtod>:
    1a06:	a0 e0       	ldi	r26, 0x00	; 0
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e8 e0       	ldi	r30, 0x08	; 8
    1a0c:	fd e0       	ldi	r31, 0x0D	; 13
    1a0e:	b3 c2       	rjmp	.+1382   	; 0x1f76 <__prologue_saves__+0xc>
    1a10:	ec 01       	movw	r28, r24
    1a12:	6b 01       	movw	r12, r22
    1a14:	61 15       	cp	r22, r1
    1a16:	71 05       	cpc	r23, r1
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <strtod+0x1a>
    1a1a:	fb 01       	movw	r30, r22
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	7e 01       	movw	r14, r28
    1a22:	ff ef       	ldi	r31, 0xFF	; 255
    1a24:	ef 1a       	sub	r14, r31
    1a26:	ff 0a       	sbc	r15, r31
    1a28:	08 81       	ld	r16, Y
    1a2a:	80 2f       	mov	r24, r16
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	3f d2       	rcall	.+1150   	; 0x1eae <isspace>
    1a30:	89 2b       	or	r24, r25
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <strtod+0x32>
    1a34:	e7 01       	movw	r28, r14
    1a36:	f4 cf       	rjmp	.-24     	; 0x1a20 <strtod+0x1a>
    1a38:	0d 32       	cpi	r16, 0x2D	; 45
    1a3a:	39 f4       	brne	.+14     	; 0x1a4a <strtod+0x44>
    1a3c:	7e 01       	movw	r14, r28
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	e8 0e       	add	r14, r24
    1a42:	f1 1c       	adc	r15, r1
    1a44:	09 81       	ldd	r16, Y+1	; 0x01
    1a46:	11 e0       	ldi	r17, 0x01	; 1
    1a48:	08 c0       	rjmp	.+16     	; 0x1a5a <strtod+0x54>
    1a4a:	0b 32       	cpi	r16, 0x2B	; 43
    1a4c:	29 f4       	brne	.+10     	; 0x1a58 <strtod+0x52>
    1a4e:	7e 01       	movw	r14, r28
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	e9 0e       	add	r14, r25
    1a54:	f1 1c       	adc	r15, r1
    1a56:	09 81       	ldd	r16, Y+1	; 0x01
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	e7 01       	movw	r28, r14
    1a5c:	21 97       	sbiw	r28, 0x01	; 1
    1a5e:	43 e0       	ldi	r20, 0x03	; 3
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	60 e7       	ldi	r22, 0x70	; 112
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	ce 01       	movw	r24, r28
    1a68:	2a d2       	rcall	.+1108   	; 0x1ebe <strncasecmp_P>
    1a6a:	89 2b       	or	r24, r25
    1a6c:	b9 f4       	brne	.+46     	; 0x1a9c <strtod+0x96>
    1a6e:	23 96       	adiw	r28, 0x03	; 3
    1a70:	45 e0       	ldi	r20, 0x05	; 5
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	6b e6       	ldi	r22, 0x6B	; 107
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	ce 01       	movw	r24, r28
    1a7a:	21 d2       	rcall	.+1090   	; 0x1ebe <strncasecmp_P>
    1a7c:	89 2b       	or	r24, r25
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <strtod+0x7c>
    1a80:	25 96       	adiw	r28, 0x05	; 5
    1a82:	c1 14       	cp	r12, r1
    1a84:	d1 04       	cpc	r13, r1
    1a86:	19 f0       	breq	.+6      	; 0x1a8e <strtod+0x88>
    1a88:	f6 01       	movw	r30, r12
    1a8a:	d1 83       	std	Z+1, r29	; 0x01
    1a8c:	c0 83       	st	Z, r28
    1a8e:	11 11       	cpse	r17, r1
    1a90:	f0 c0       	rjmp	.+480    	; 0x1c72 <strtod+0x26c>
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	80 e8       	ldi	r24, 0x80	; 128
    1a98:	9f e7       	ldi	r25, 0x7F	; 127
    1a9a:	f4 c0       	rjmp	.+488    	; 0x1c84 <strtod+0x27e>
    1a9c:	43 e0       	ldi	r20, 0x03	; 3
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	68 e6       	ldi	r22, 0x68	; 104
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	0b d2       	rcall	.+1046   	; 0x1ebe <strncasecmp_P>
    1aa8:	89 2b       	or	r24, r25
    1aaa:	59 f4       	brne	.+22     	; 0x1ac2 <strtod+0xbc>
    1aac:	c1 14       	cp	r12, r1
    1aae:	d1 04       	cpc	r13, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <strtod+0xae>
    1ab2:	e4 c0       	rjmp	.+456    	; 0x1c7c <strtod+0x276>
    1ab4:	f2 e0       	ldi	r31, 0x02	; 2
    1ab6:	ef 0e       	add	r14, r31
    1ab8:	f1 1c       	adc	r15, r1
    1aba:	f6 01       	movw	r30, r12
    1abc:	f1 82       	std	Z+1, r15	; 0x01
    1abe:	e0 82       	st	Z, r14
    1ac0:	dd c0       	rjmp	.+442    	; 0x1c7c <strtod+0x276>
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	a9 01       	movw	r20, r18
    1ac8:	c0 e0       	ldi	r28, 0x00	; 0
    1aca:	d0 e0       	ldi	r29, 0x00	; 0
    1acc:	f7 01       	movw	r30, r14
    1ace:	80 ed       	ldi	r24, 0xD0	; 208
    1ad0:	a8 2e       	mov	r10, r24
    1ad2:	a0 0e       	add	r10, r16
    1ad4:	89 e0       	ldi	r24, 0x09	; 9
    1ad6:	8a 15       	cp	r24, r10
    1ad8:	28 f1       	brcs	.+74     	; 0x1b24 <strtod+0x11e>
    1ada:	91 2f       	mov	r25, r17
    1adc:	92 60       	ori	r25, 0x02	; 2
    1ade:	b9 2e       	mov	r11, r25
    1ae0:	81 2f       	mov	r24, r17
    1ae2:	88 70       	andi	r24, 0x08	; 8
    1ae4:	12 ff       	sbrs	r17, 2
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <strtod+0xea>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	23 c0       	rjmp	.+70     	; 0x1b32 <strtod+0x12c>
    1aec:	21 96       	adiw	r28, 0x01	; 1
    1aee:	21 c0       	rjmp	.+66     	; 0x1b32 <strtod+0x12c>
    1af0:	81 11       	cpse	r24, r1
    1af2:	21 97       	sbiw	r28, 0x01	; 1
    1af4:	a5 e0       	ldi	r26, 0x05	; 5
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	2e d2       	rcall	.+1116   	; 0x1f56 <__muluhisi3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	9c 01       	movw	r18, r24
    1b08:	ad 01       	movw	r20, r26
    1b0a:	2a 0d       	add	r18, r10
    1b0c:	31 1d       	adc	r19, r1
    1b0e:	41 1d       	adc	r20, r1
    1b10:	51 1d       	adc	r21, r1
    1b12:	28 39       	cpi	r18, 0x98	; 152
    1b14:	89 e9       	ldi	r24, 0x99	; 153
    1b16:	38 07       	cpc	r19, r24
    1b18:	48 07       	cpc	r20, r24
    1b1a:	89 e1       	ldi	r24, 0x19	; 25
    1b1c:	58 07       	cpc	r21, r24
    1b1e:	48 f0       	brcs	.+18     	; 0x1b32 <strtod+0x12c>
    1b20:	16 60       	ori	r17, 0x06	; 6
    1b22:	06 c0       	rjmp	.+12     	; 0x1b30 <strtod+0x12a>
    1b24:	9e ef       	ldi	r25, 0xFE	; 254
    1b26:	a9 12       	cpse	r10, r25
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <strtod+0x138>
    1b2a:	13 fd       	sbrc	r17, 3
    1b2c:	40 c0       	rjmp	.+128    	; 0x1bae <strtod+0x1a8>
    1b2e:	18 60       	ori	r17, 0x08	; 8
    1b30:	b1 2e       	mov	r11, r17
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	e8 1a       	sub	r14, r24
    1b36:	f8 0a       	sbc	r15, r24
    1b38:	00 81       	ld	r16, Z
    1b3a:	1b 2d       	mov	r17, r11
    1b3c:	c7 cf       	rjmp	.-114    	; 0x1acc <strtod+0xc6>
    1b3e:	80 2f       	mov	r24, r16
    1b40:	8f 7d       	andi	r24, 0xDF	; 223
    1b42:	85 34       	cpi	r24, 0x45	; 69
    1b44:	a1 f5       	brne	.+104    	; 0x1bae <strtod+0x1a8>
    1b46:	80 81       	ld	r24, Z
    1b48:	8d 32       	cpi	r24, 0x2D	; 45
    1b4a:	11 f4       	brne	.+4      	; 0x1b50 <strtod+0x14a>
    1b4c:	10 61       	ori	r17, 0x10	; 16
    1b4e:	06 c0       	rjmp	.+12     	; 0x1b5c <strtod+0x156>
    1b50:	8b 32       	cpi	r24, 0x2B	; 43
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <strtod+0x156>
    1b54:	31 96       	adiw	r30, 0x01	; 1
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <strtod+0x15e>
    1b5c:	81 81       	ldd	r24, Z+1	; 0x01
    1b5e:	32 96       	adiw	r30, 0x02	; 2
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	80 53       	subi	r24, 0x30	; 48
    1b66:	8a 30       	cpi	r24, 0x0A	; 10
    1b68:	18 f0       	brcs	.+6      	; 0x1b70 <strtod+0x16a>
    1b6a:	e6 1b       	sub	r30, r22
    1b6c:	f7 0b       	sbc	r31, r23
    1b6e:	1f c0       	rjmp	.+62     	; 0x1bae <strtod+0x1a8>
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	60 38       	cpi	r22, 0x80	; 128
    1b76:	9c e0       	ldi	r25, 0x0C	; 12
    1b78:	79 07       	cpc	r23, r25
    1b7a:	5c f4       	brge	.+22     	; 0x1b92 <strtod+0x18c>
    1b7c:	db 01       	movw	r26, r22
    1b7e:	aa 0f       	add	r26, r26
    1b80:	bb 1f       	adc	r27, r27
    1b82:	aa 0f       	add	r26, r26
    1b84:	bb 1f       	adc	r27, r27
    1b86:	6a 0f       	add	r22, r26
    1b88:	7b 1f       	adc	r23, r27
    1b8a:	66 0f       	add	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	68 0f       	add	r22, r24
    1b90:	71 1d       	adc	r23, r1
    1b92:	31 96       	adiw	r30, 0x01	; 1
    1b94:	df 01       	movw	r26, r30
    1b96:	11 97       	sbiw	r26, 0x01	; 1
    1b98:	8c 91       	ld	r24, X
    1b9a:	80 53       	subi	r24, 0x30	; 48
    1b9c:	8a 30       	cpi	r24, 0x0A	; 10
    1b9e:	50 f3       	brcs	.-44     	; 0x1b74 <strtod+0x16e>
    1ba0:	14 ff       	sbrs	r17, 4
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <strtod+0x1a4>
    1ba4:	71 95       	neg	r23
    1ba6:	61 95       	neg	r22
    1ba8:	71 09       	sbc	r23, r1
    1baa:	c6 0f       	add	r28, r22
    1bac:	d7 1f       	adc	r29, r23
    1bae:	11 ff       	sbrs	r17, 1
    1bb0:	08 c0       	rjmp	.+16     	; 0x1bc2 <strtod+0x1bc>
    1bb2:	c1 14       	cp	r12, r1
    1bb4:	d1 04       	cpc	r13, r1
    1bb6:	29 f0       	breq	.+10     	; 0x1bc2 <strtod+0x1bc>
    1bb8:	cf 01       	movw	r24, r30
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f6 01       	movw	r30, r12
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	b9 01       	movw	r22, r18
    1bc6:	df dd       	rcall	.-1090   	; 0x1786 <__floatunsisf>
    1bc8:	21 2f       	mov	r18, r17
    1bca:	23 70       	andi	r18, 0x03	; 3
    1bcc:	23 30       	cpi	r18, 0x03	; 3
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <strtod+0x1d0>
    1bd0:	4b 01       	movw	r8, r22
    1bd2:	5c 01       	movw	r10, r24
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <strtod+0x1dc>
    1bd6:	4b 01       	movw	r8, r22
    1bd8:	5c 01       	movw	r10, r24
    1bda:	b7 fa       	bst	r11, 7
    1bdc:	b0 94       	com	r11
    1bde:	b7 f8       	bld	r11, 7
    1be0:	b0 94       	com	r11
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	a9 01       	movw	r20, r18
    1be8:	c5 01       	movw	r24, r10
    1bea:	b4 01       	movw	r22, r8
    1bec:	2f dd       	rcall	.-1442   	; 0x164c <__cmpsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <strtod+0x1ee>
    1bf2:	3c c0       	rjmp	.+120    	; 0x1c6c <strtod+0x266>
    1bf4:	d7 ff       	sbrs	r29, 7
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <strtod+0x1fe>
    1bf8:	d1 95       	neg	r29
    1bfa:	c1 95       	neg	r28
    1bfc:	d1 09       	sbc	r29, r1
    1bfe:	07 e8       	ldi	r16, 0x87	; 135
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <strtod+0x202>
    1c04:	0f e9       	ldi	r16, 0x9F	; 159
    1c06:	10 e0       	ldi	r17, 0x00	; 0
    1c08:	68 01       	movw	r12, r16
    1c0a:	f8 e1       	ldi	r31, 0x18	; 24
    1c0c:	cf 1a       	sub	r12, r31
    1c0e:	d1 08       	sbc	r13, r1
    1c10:	90 e2       	ldi	r25, 0x20	; 32
    1c12:	e9 2e       	mov	r14, r25
    1c14:	f1 2c       	mov	r15, r1
    1c16:	ce 15       	cp	r28, r14
    1c18:	df 05       	cpc	r29, r15
    1c1a:	6c f0       	brlt	.+26     	; 0x1c36 <strtod+0x230>
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	25 91       	lpm	r18, Z+
    1c20:	35 91       	lpm	r19, Z+
    1c22:	45 91       	lpm	r20, Z+
    1c24:	54 91       	lpm	r21, Z
    1c26:	c5 01       	movw	r24, r10
    1c28:	b4 01       	movw	r22, r8
    1c2a:	63 de       	rcall	.-826    	; 0x18f2 <__mulsf3>
    1c2c:	4b 01       	movw	r8, r22
    1c2e:	5c 01       	movw	r10, r24
    1c30:	ce 19       	sub	r28, r14
    1c32:	df 09       	sbc	r29, r15
    1c34:	f0 cf       	rjmp	.-32     	; 0x1c16 <strtod+0x210>
    1c36:	04 50       	subi	r16, 0x04	; 4
    1c38:	11 09       	sbc	r17, r1
    1c3a:	f5 94       	asr	r15
    1c3c:	e7 94       	ror	r14
    1c3e:	0c 15       	cp	r16, r12
    1c40:	1d 05       	cpc	r17, r13
    1c42:	49 f7       	brne	.-46     	; 0x1c16 <strtod+0x210>
    1c44:	8a 2d       	mov	r24, r10
    1c46:	88 0f       	add	r24, r24
    1c48:	8b 2d       	mov	r24, r11
    1c4a:	88 1f       	adc	r24, r24
    1c4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c4e:	41 f0       	breq	.+16     	; 0x1c60 <strtod+0x25a>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	a9 01       	movw	r20, r18
    1c56:	c5 01       	movw	r24, r10
    1c58:	b4 01       	movw	r22, r8
    1c5a:	f8 dc       	rcall	.-1552   	; 0x164c <__cmpsf2>
    1c5c:	81 11       	cpse	r24, r1
    1c5e:	06 c0       	rjmp	.+12     	; 0x1c6c <strtod+0x266>
    1c60:	82 e2       	ldi	r24, 0x22	; 34
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	90 93 9a 08 	sts	0x089A, r25	; 0x80089a <errno+0x1>
    1c68:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <errno>
    1c6c:	c5 01       	movw	r24, r10
    1c6e:	b4 01       	movw	r22, r8
    1c70:	09 c0       	rjmp	.+18     	; 0x1c84 <strtod+0x27e>
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	80 e8       	ldi	r24, 0x80	; 128
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	04 c0       	rjmp	.+8      	; 0x1c84 <strtod+0x27e>
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	80 ec       	ldi	r24, 0xC0	; 192
    1c82:	9f e7       	ldi	r25, 0x7F	; 127
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	ec e0       	ldi	r30, 0x0C	; 12
    1c8a:	91 c1       	rjmp	.+802    	; 0x1fae <__epilogue_restores__+0xc>

00001c8c <strtol>:
    1c8c:	a0 e0       	ldi	r26, 0x00	; 0
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	eb e4       	ldi	r30, 0x4B	; 75
    1c92:	fe e0       	ldi	r31, 0x0E	; 14
    1c94:	6b c1       	rjmp	.+726    	; 0x1f6c <__prologue_saves__+0x2>
    1c96:	5c 01       	movw	r10, r24
    1c98:	6b 01       	movw	r12, r22
    1c9a:	7a 01       	movw	r14, r20
    1c9c:	61 15       	cp	r22, r1
    1c9e:	71 05       	cpc	r23, r1
    1ca0:	19 f0       	breq	.+6      	; 0x1ca8 <strtol+0x1c>
    1ca2:	fb 01       	movw	r30, r22
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
    1ca8:	e1 14       	cp	r14, r1
    1caa:	f1 04       	cpc	r15, r1
    1cac:	29 f0       	breq	.+10     	; 0x1cb8 <strtol+0x2c>
    1cae:	c7 01       	movw	r24, r14
    1cb0:	02 97       	sbiw	r24, 0x02	; 2
    1cb2:	83 97       	sbiw	r24, 0x23	; 35
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <strtol+0x2c>
    1cb6:	e2 c0       	rjmp	.+452    	; 0x1e7c <strtol+0x1f0>
    1cb8:	e5 01       	movw	r28, r10
    1cba:	21 96       	adiw	r28, 0x01	; 1
    1cbc:	f5 01       	movw	r30, r10
    1cbe:	10 81       	ld	r17, Z
    1cc0:	81 2f       	mov	r24, r17
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	f4 d0       	rcall	.+488    	; 0x1eae <isspace>
    1cc6:	89 2b       	or	r24, r25
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <strtol+0x42>
    1cca:	5e 01       	movw	r10, r28
    1ccc:	f5 cf       	rjmp	.-22     	; 0x1cb8 <strtol+0x2c>
    1cce:	1d 32       	cpi	r17, 0x2D	; 45
    1cd0:	29 f4       	brne	.+10     	; 0x1cdc <strtol+0x50>
    1cd2:	21 96       	adiw	r28, 0x01	; 1
    1cd4:	f5 01       	movw	r30, r10
    1cd6:	11 81       	ldd	r17, Z+1	; 0x01
    1cd8:	01 e0       	ldi	r16, 0x01	; 1
    1cda:	07 c0       	rjmp	.+14     	; 0x1cea <strtol+0x5e>
    1cdc:	1b 32       	cpi	r17, 0x2B	; 43
    1cde:	21 f4       	brne	.+8      	; 0x1ce8 <strtol+0x5c>
    1ce0:	e5 01       	movw	r28, r10
    1ce2:	22 96       	adiw	r28, 0x02	; 2
    1ce4:	f5 01       	movw	r30, r10
    1ce6:	11 81       	ldd	r17, Z+1	; 0x01
    1ce8:	00 e0       	ldi	r16, 0x00	; 0
    1cea:	e1 14       	cp	r14, r1
    1cec:	f1 04       	cpc	r15, r1
    1cee:	09 f1       	breq	.+66     	; 0x1d32 <strtol+0xa6>
    1cf0:	f0 e1       	ldi	r31, 0x10	; 16
    1cf2:	ef 16       	cp	r14, r31
    1cf4:	f1 04       	cpc	r15, r1
    1cf6:	29 f4       	brne	.+10     	; 0x1d02 <strtol+0x76>
    1cf8:	3e c0       	rjmp	.+124    	; 0x1d76 <strtol+0xea>
    1cfa:	10 e3       	ldi	r17, 0x30	; 48
    1cfc:	e1 14       	cp	r14, r1
    1cfe:	f1 04       	cpc	r15, r1
    1d00:	21 f1       	breq	.+72     	; 0x1d4a <strtol+0xbe>
    1d02:	28 e0       	ldi	r18, 0x08	; 8
    1d04:	e2 16       	cp	r14, r18
    1d06:	f1 04       	cpc	r15, r1
    1d08:	01 f1       	breq	.+64     	; 0x1d4a <strtol+0xbe>
    1d0a:	54 f4       	brge	.+20     	; 0x1d20 <strtol+0x94>
    1d0c:	e2 e0       	ldi	r30, 0x02	; 2
    1d0e:	ee 16       	cp	r14, r30
    1d10:	f1 04       	cpc	r15, r1
    1d12:	21 f5       	brne	.+72     	; 0x1d5c <strtol+0xd0>
    1d14:	81 2c       	mov	r8, r1
    1d16:	91 2c       	mov	r9, r1
    1d18:	a1 2c       	mov	r10, r1
    1d1a:	b0 e4       	ldi	r27, 0x40	; 64
    1d1c:	bb 2e       	mov	r11, r27
    1d1e:	3d c0       	rjmp	.+122    	; 0x1d9a <strtol+0x10e>
    1d20:	fa e0       	ldi	r31, 0x0A	; 10
    1d22:	ef 16       	cp	r14, r31
    1d24:	f1 04       	cpc	r15, r1
    1d26:	39 f0       	breq	.+14     	; 0x1d36 <strtol+0xaa>
    1d28:	20 e1       	ldi	r18, 0x10	; 16
    1d2a:	e2 16       	cp	r14, r18
    1d2c:	f1 04       	cpc	r15, r1
    1d2e:	b1 f4       	brne	.+44     	; 0x1d5c <strtol+0xd0>
    1d30:	2f c0       	rjmp	.+94     	; 0x1d90 <strtol+0x104>
    1d32:	10 33       	cpi	r17, 0x30	; 48
    1d34:	11 f1       	breq	.+68     	; 0x1d7a <strtol+0xee>
    1d36:	fa e0       	ldi	r31, 0x0A	; 10
    1d38:	ef 2e       	mov	r14, r31
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	ac ec       	ldi	r26, 0xCC	; 204
    1d3e:	8a 2e       	mov	r8, r26
    1d40:	98 2c       	mov	r9, r8
    1d42:	a8 2c       	mov	r10, r8
    1d44:	ac e0       	ldi	r26, 0x0C	; 12
    1d46:	ba 2e       	mov	r11, r26
    1d48:	28 c0       	rjmp	.+80     	; 0x1d9a <strtol+0x10e>
    1d4a:	78 e0       	ldi	r23, 0x08	; 8
    1d4c:	e7 2e       	mov	r14, r23
    1d4e:	f1 2c       	mov	r15, r1
    1d50:	81 2c       	mov	r8, r1
    1d52:	91 2c       	mov	r9, r1
    1d54:	a1 2c       	mov	r10, r1
    1d56:	e0 e1       	ldi	r30, 0x10	; 16
    1d58:	be 2e       	mov	r11, r30
    1d5a:	1f c0       	rjmp	.+62     	; 0x1d9a <strtol+0x10e>
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e8       	ldi	r25, 0x80	; 128
    1d64:	97 01       	movw	r18, r14
    1d66:	0f 2c       	mov	r0, r15
    1d68:	00 0c       	add	r0, r0
    1d6a:	44 0b       	sbc	r20, r20
    1d6c:	55 0b       	sbc	r21, r21
    1d6e:	d1 d0       	rcall	.+418    	; 0x1f12 <__udivmodsi4>
    1d70:	49 01       	movw	r8, r18
    1d72:	5a 01       	movw	r10, r20
    1d74:	12 c0       	rjmp	.+36     	; 0x1d9a <strtol+0x10e>
    1d76:	10 33       	cpi	r17, 0x30	; 48
    1d78:	59 f4       	brne	.+22     	; 0x1d90 <strtol+0x104>
    1d7a:	88 81       	ld	r24, Y
    1d7c:	8f 7d       	andi	r24, 0xDF	; 223
    1d7e:	88 35       	cpi	r24, 0x58	; 88
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <strtol+0xf8>
    1d82:	bb cf       	rjmp	.-138    	; 0x1cfa <strtol+0x6e>
    1d84:	19 81       	ldd	r17, Y+1	; 0x01
    1d86:	22 96       	adiw	r28, 0x02	; 2
    1d88:	02 60       	ori	r16, 0x02	; 2
    1d8a:	80 e1       	ldi	r24, 0x10	; 16
    1d8c:	e8 2e       	mov	r14, r24
    1d8e:	f1 2c       	mov	r15, r1
    1d90:	81 2c       	mov	r8, r1
    1d92:	91 2c       	mov	r9, r1
    1d94:	a1 2c       	mov	r10, r1
    1d96:	68 e0       	ldi	r22, 0x08	; 8
    1d98:	b6 2e       	mov	r11, r22
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	cb 01       	movw	r24, r22
    1da2:	27 01       	movw	r4, r14
    1da4:	0f 2c       	mov	r0, r15
    1da6:	00 0c       	add	r0, r0
    1da8:	66 08       	sbc	r6, r6
    1daa:	77 08       	sbc	r7, r7
    1dac:	fe 01       	movw	r30, r28
    1dae:	50 ed       	ldi	r21, 0xD0	; 208
    1db0:	35 2e       	mov	r3, r21
    1db2:	31 0e       	add	r3, r17
    1db4:	29 e0       	ldi	r18, 0x09	; 9
    1db6:	23 15       	cp	r18, r3
    1db8:	70 f4       	brcc	.+28     	; 0x1dd6 <strtol+0x14a>
    1dba:	2f eb       	ldi	r18, 0xBF	; 191
    1dbc:	21 0f       	add	r18, r17
    1dbe:	2a 31       	cpi	r18, 0x1A	; 26
    1dc0:	18 f4       	brcc	.+6      	; 0x1dc8 <strtol+0x13c>
    1dc2:	39 ec       	ldi	r19, 0xC9	; 201
    1dc4:	33 2e       	mov	r3, r19
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <strtol+0x148>
    1dc8:	2f e9       	ldi	r18, 0x9F	; 159
    1dca:	21 0f       	add	r18, r17
    1dcc:	2a 31       	cpi	r18, 0x1A	; 26
    1dce:	10 f5       	brcc	.+68     	; 0x1e14 <strtol+0x188>
    1dd0:	29 ea       	ldi	r18, 0xA9	; 169
    1dd2:	32 2e       	mov	r3, r18
    1dd4:	31 0e       	add	r3, r17
    1dd6:	23 2d       	mov	r18, r3
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	2e 15       	cp	r18, r14
    1ddc:	3f 05       	cpc	r19, r15
    1dde:	d4 f4       	brge	.+52     	; 0x1e14 <strtol+0x188>
    1de0:	47 fd       	sbrc	r20, 7
    1de2:	15 c0       	rjmp	.+42     	; 0x1e0e <strtol+0x182>
    1de4:	86 16       	cp	r8, r22
    1de6:	97 06       	cpc	r9, r23
    1de8:	a8 06       	cpc	r10, r24
    1dea:	b9 06       	cpc	r11, r25
    1dec:	68 f0       	brcs	.+26     	; 0x1e08 <strtol+0x17c>
    1dee:	a3 01       	movw	r20, r6
    1df0:	92 01       	movw	r18, r4
    1df2:	80 d0       	rcall	.+256    	; 0x1ef4 <__mulsi3>
    1df4:	63 0d       	add	r22, r3
    1df6:	71 1d       	adc	r23, r1
    1df8:	81 1d       	adc	r24, r1
    1dfa:	91 1d       	adc	r25, r1
    1dfc:	61 30       	cpi	r22, 0x01	; 1
    1dfe:	71 05       	cpc	r23, r1
    1e00:	81 05       	cpc	r24, r1
    1e02:	20 e8       	ldi	r18, 0x80	; 128
    1e04:	92 07       	cpc	r25, r18
    1e06:	10 f0       	brcs	.+4      	; 0x1e0c <strtol+0x180>
    1e08:	4f ef       	ldi	r20, 0xFF	; 255
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <strtol+0x182>
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	21 96       	adiw	r28, 0x01	; 1
    1e10:	10 81       	ld	r17, Z
    1e12:	cc cf       	rjmp	.-104    	; 0x1dac <strtol+0x120>
    1e14:	20 2f       	mov	r18, r16
    1e16:	21 70       	andi	r18, 0x01	; 1
    1e18:	c1 14       	cp	r12, r1
    1e1a:	d1 04       	cpc	r13, r1
    1e1c:	71 f0       	breq	.+28     	; 0x1e3a <strtol+0x1ae>
    1e1e:	44 23       	and	r20, r20
    1e20:	29 f0       	breq	.+10     	; 0x1e2c <strtol+0x1a0>
    1e22:	21 97       	sbiw	r28, 0x01	; 1
    1e24:	f6 01       	movw	r30, r12
    1e26:	d1 83       	std	Z+1, r29	; 0x01
    1e28:	c0 83       	st	Z, r28
    1e2a:	07 c0       	rjmp	.+14     	; 0x1e3a <strtol+0x1ae>
    1e2c:	01 ff       	sbrs	r16, 1
    1e2e:	19 c0       	rjmp	.+50     	; 0x1e62 <strtol+0x1d6>
    1e30:	22 97       	sbiw	r28, 0x02	; 2
    1e32:	f6 01       	movw	r30, r12
    1e34:	d1 83       	std	Z+1, r29	; 0x01
    1e36:	c0 83       	st	Z, r28
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <strtol+0x1d6>
    1e3a:	47 ff       	sbrs	r20, 7
    1e3c:	12 c0       	rjmp	.+36     	; 0x1e62 <strtol+0x1d6>
    1e3e:	22 23       	and	r18, r18
    1e40:	29 f0       	breq	.+10     	; 0x1e4c <strtol+0x1c0>
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	70 e0       	ldi	r23, 0x00	; 0
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e8       	ldi	r25, 0x80	; 128
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <strtol+0x1c8>
    1e4c:	6f ef       	ldi	r22, 0xFF	; 255
    1e4e:	7f ef       	ldi	r23, 0xFF	; 255
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	9f e7       	ldi	r25, 0x7F	; 127
    1e54:	22 e2       	ldi	r18, 0x22	; 34
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	30 93 9a 08 	sts	0x089A, r19	; 0x80089a <errno+0x1>
    1e5c:	20 93 99 08 	sts	0x0899, r18	; 0x800899 <errno>
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <strtol+0x1e8>
    1e62:	22 23       	and	r18, r18
    1e64:	81 f0       	breq	.+32     	; 0x1e86 <strtol+0x1fa>
    1e66:	90 95       	com	r25
    1e68:	80 95       	com	r24
    1e6a:	70 95       	com	r23
    1e6c:	61 95       	neg	r22
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e70:	8f 4f       	sbci	r24, 0xFF	; 255
    1e72:	9f 4f       	sbci	r25, 0xFF	; 255
    1e74:	46 2f       	mov	r20, r22
    1e76:	37 2f       	mov	r19, r23
    1e78:	28 2f       	mov	r18, r24
    1e7a:	12 c0       	rjmp	.+36     	; 0x1ea0 <strtol+0x214>
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0d c0       	rjmp	.+26     	; 0x1ea0 <strtol+0x214>
    1e86:	97 ff       	sbrs	r25, 7
    1e88:	f5 cf       	rjmp	.-22     	; 0x1e74 <strtol+0x1e8>
    1e8a:	82 e2       	ldi	r24, 0x22	; 34
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	90 93 9a 08 	sts	0x089A, r25	; 0x80089a <errno+0x1>
    1e92:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <errno>
    1e96:	6f ef       	ldi	r22, 0xFF	; 255
    1e98:	7f ef       	ldi	r23, 0xFF	; 255
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	9f e7       	ldi	r25, 0x7F	; 127
    1e9e:	ea cf       	rjmp	.-44     	; 0x1e74 <strtol+0x1e8>
    1ea0:	64 2f       	mov	r22, r20
    1ea2:	73 2f       	mov	r23, r19
    1ea4:	82 2f       	mov	r24, r18
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	e1 e1       	ldi	r30, 0x11	; 17
    1eac:	7b c0       	rjmp	.+246    	; 0x1fa4 <__epilogue_restores__+0x2>

00001eae <isspace>:
    1eae:	91 11       	cpse	r25, r1
    1eb0:	1e c0       	rjmp	.+60     	; 0x1eee <__ctype_isfalse>
    1eb2:	80 32       	cpi	r24, 0x20	; 32
    1eb4:	19 f0       	breq	.+6      	; 0x1ebc <isspace+0xe>
    1eb6:	89 50       	subi	r24, 0x09	; 9
    1eb8:	85 50       	subi	r24, 0x05	; 5
    1eba:	d0 f7       	brcc	.-12     	; 0x1eb0 <isspace+0x2>
    1ebc:	08 95       	ret

00001ebe <strncasecmp_P>:
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	41 50       	subi	r20, 0x01	; 1
    1ec4:	50 40       	sbci	r21, 0x00	; 0
    1ec6:	88 f0       	brcs	.+34     	; 0x1eea <strncasecmp_P+0x2c>
    1ec8:	8d 91       	ld	r24, X+
    1eca:	81 34       	cpi	r24, 0x41	; 65
    1ecc:	1c f0       	brlt	.+6      	; 0x1ed4 <strncasecmp_P+0x16>
    1ece:	8b 35       	cpi	r24, 0x5B	; 91
    1ed0:	0c f4       	brge	.+2      	; 0x1ed4 <strncasecmp_P+0x16>
    1ed2:	80 5e       	subi	r24, 0xE0	; 224
    1ed4:	65 91       	lpm	r22, Z+
    1ed6:	61 34       	cpi	r22, 0x41	; 65
    1ed8:	1c f0       	brlt	.+6      	; 0x1ee0 <strncasecmp_P+0x22>
    1eda:	6b 35       	cpi	r22, 0x5B	; 91
    1edc:	0c f4       	brge	.+2      	; 0x1ee0 <strncasecmp_P+0x22>
    1ede:	60 5e       	subi	r22, 0xE0	; 224
    1ee0:	86 1b       	sub	r24, r22
    1ee2:	61 11       	cpse	r22, r1
    1ee4:	71 f3       	breq	.-36     	; 0x1ec2 <strncasecmp_P+0x4>
    1ee6:	99 0b       	sbc	r25, r25
    1ee8:	08 95       	ret
    1eea:	88 1b       	sub	r24, r24
    1eec:	fc cf       	rjmp	.-8      	; 0x1ee6 <strncasecmp_P+0x28>

00001eee <__ctype_isfalse>:
    1eee:	99 27       	eor	r25, r25
    1ef0:	88 27       	eor	r24, r24

00001ef2 <__ctype_istrue>:
    1ef2:	08 95       	ret

00001ef4 <__mulsi3>:
    1ef4:	db 01       	movw	r26, r22
    1ef6:	8f 93       	push	r24
    1ef8:	9f 93       	push	r25
    1efa:	2d d0       	rcall	.+90     	; 0x1f56 <__muluhisi3>
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	a2 9f       	mul	r26, r18
    1f02:	80 0d       	add	r24, r0
    1f04:	91 1d       	adc	r25, r1
    1f06:	a3 9f       	mul	r26, r19
    1f08:	90 0d       	add	r25, r0
    1f0a:	b2 9f       	mul	r27, r18
    1f0c:	90 0d       	add	r25, r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	08 95       	ret

00001f12 <__udivmodsi4>:
    1f12:	a1 e2       	ldi	r26, 0x21	; 33
    1f14:	1a 2e       	mov	r1, r26
    1f16:	aa 1b       	sub	r26, r26
    1f18:	bb 1b       	sub	r27, r27
    1f1a:	fd 01       	movw	r30, r26
    1f1c:	0d c0       	rjmp	.+26     	; 0x1f38 <__udivmodsi4_ep>

00001f1e <__udivmodsi4_loop>:
    1f1e:	aa 1f       	adc	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	ee 1f       	adc	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	a2 17       	cp	r26, r18
    1f28:	b3 07       	cpc	r27, r19
    1f2a:	e4 07       	cpc	r30, r20
    1f2c:	f5 07       	cpc	r31, r21
    1f2e:	20 f0       	brcs	.+8      	; 0x1f38 <__udivmodsi4_ep>
    1f30:	a2 1b       	sub	r26, r18
    1f32:	b3 0b       	sbc	r27, r19
    1f34:	e4 0b       	sbc	r30, r20
    1f36:	f5 0b       	sbc	r31, r21

00001f38 <__udivmodsi4_ep>:
    1f38:	66 1f       	adc	r22, r22
    1f3a:	77 1f       	adc	r23, r23
    1f3c:	88 1f       	adc	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	1a 94       	dec	r1
    1f42:	69 f7       	brne	.-38     	; 0x1f1e <__udivmodsi4_loop>
    1f44:	60 95       	com	r22
    1f46:	70 95       	com	r23
    1f48:	80 95       	com	r24
    1f4a:	90 95       	com	r25
    1f4c:	9b 01       	movw	r18, r22
    1f4e:	ac 01       	movw	r20, r24
    1f50:	bd 01       	movw	r22, r26
    1f52:	cf 01       	movw	r24, r30
    1f54:	08 95       	ret

00001f56 <__muluhisi3>:
    1f56:	40 d0       	rcall	.+128    	; 0x1fd8 <__umulhisi3>
    1f58:	a5 9f       	mul	r26, r21
    1f5a:	90 0d       	add	r25, r0
    1f5c:	b4 9f       	mul	r27, r20
    1f5e:	90 0d       	add	r25, r0
    1f60:	a4 9f       	mul	r26, r20
    1f62:	80 0d       	add	r24, r0
    1f64:	91 1d       	adc	r25, r1
    1f66:	11 24       	eor	r1, r1
    1f68:	08 95       	ret

00001f6a <__prologue_saves__>:
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	ca 1b       	sub	r28, r26
    1f94:	db 0b       	sbc	r29, r27
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	09 94       	ijmp

00001fa2 <__epilogue_restores__>:
    1fa2:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa4:	39 88       	ldd	r3, Y+17	; 0x11
    1fa6:	48 88       	ldd	r4, Y+16	; 0x10
    1fa8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1faa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fac:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fae:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb4:	b9 84       	ldd	r11, Y+9	; 0x09
    1fb6:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb8:	df 80       	ldd	r13, Y+7	; 0x07
    1fba:	ee 80       	ldd	r14, Y+6	; 0x06
    1fbc:	fd 80       	ldd	r15, Y+5	; 0x05
    1fbe:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc0:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc2:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc4:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc6:	ce 0f       	add	r28, r30
    1fc8:	d1 1d       	adc	r29, r1
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	ed 01       	movw	r28, r26
    1fd6:	08 95       	ret

00001fd8 <__umulhisi3>:
    1fd8:	a2 9f       	mul	r26, r18
    1fda:	b0 01       	movw	r22, r0
    1fdc:	b3 9f       	mul	r27, r19
    1fde:	c0 01       	movw	r24, r0
    1fe0:	a3 9f       	mul	r26, r19
    1fe2:	70 0d       	add	r23, r0
    1fe4:	81 1d       	adc	r24, r1
    1fe6:	11 24       	eor	r1, r1
    1fe8:	91 1d       	adc	r25, r1
    1fea:	b2 9f       	mul	r27, r18
    1fec:	70 0d       	add	r23, r0
    1fee:	81 1d       	adc	r24, r1
    1ff0:	11 24       	eor	r1, r1
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	08 95       	ret

00001ff6 <_exit>:
    1ff6:	f8 94       	cli

00001ff8 <__stop_program>:
    1ff8:	ff cf       	rjmp	.-2      	; 0x1ff8 <__stop_program>
